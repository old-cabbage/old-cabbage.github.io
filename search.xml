<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算物理之简谐振动</title>
      <link href="/2024/10/24/comphy-oscillator/"/>
      <url>/2024/10/24/comphy-oscillator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="讨论误差的影响"><a href="#讨论误差的影响" class="headerlink" title="讨论误差的影响"></a>讨论误差的影响</h2><p>考虑一个单摆我们可以先解析的求解</p><script type="math/tex; mode=display">F_\theta=-m g \sin \theta,</script><script type="math/tex; mode=display">F_\theta=m d^2s/dt^2</script><script type="math/tex; mode=display">\sin \theta \approx \theta</script><script type="math/tex; mode=display">\frac{d^2 \theta}{d t^2}=-\frac{g}{\ell} \theta</script><p>解析解</p><script type="math/tex; mode=display">\theta=\theta_0 \sin (\Omega t+\phi)</script><p>  这里 $\omega$ 是角速度</p><script type="math/tex; mode=display">\Omega=\sqrt{g / \ell}</script><script type="math/tex; mode=display">\begin{aligned}& \frac{d \omega}{d t}=-\frac{g}{\ell} \theta, \\& \frac{d \theta}{d t}=\omega,\end{aligned}</script><blockquote><p>二阶常微分方程数值求解方式是类似的。</p></blockquote><script type="math/tex; mode=display">\begin{aligned}\omega_{i+1} & =\omega_i-\frac{g}{\ell} \theta_i \Delta t, \\\theta_{i+1} & =\theta_i+\omega_i \Delta t .\end{aligned}</script><p>写出对应的程序</p><p>json文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pendulum1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;length&quot;</span><span class="punctuation">:</span><span class="number">2.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;theta0&quot;</span><span class="punctuation">:</span><span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;omega0&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">g = <span class="number">9.8</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare pendulum class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Simple_Pendulum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, theta0=<span class="number">0</span>, omega0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.length = length</span><br><span class="line">        <span class="variable language_">self</span>.theta = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.omega = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.theta[<span class="number">0</span>] = theta0</span><br><span class="line">        <span class="variable language_">self</span>.omega[<span class="number">0</span>] = omega0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.theta[i + <span class="number">1</span>], <span class="variable language_">self</span>.omega[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.theta[i], <span class="variable language_">self</span>.omega[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, theta, omega, t</span>):</span><br><span class="line">        _theta = theta + omega*dt</span><br><span class="line">        _omega = omega - (g/<span class="variable language_">self</span>.length)*theta*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _theta, _omega, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.theta, <span class="variable language_">self</span>.omega, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_pendulum</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/pendulum.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    pendulum1 = Simple_Pendulum(data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;length&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;theta0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;omega0&quot;</span>])</span><br><span class="line">    pendulum1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    theta, omega, t = pendulum1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, theta, label=<span class="string">r&quot;$\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\theta$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, omega, label=<span class="string">r&quot;$\omega$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\omega$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $\omega$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;pendulum.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_pendulum()</span><br></pre></td></tr></table></figure><p><img src="/img/pendulum.png" alt="pendulum"></p><p>很明显，这样处理会导致结果发散</p><h2 id="结果发散的原因"><a href="#结果发散的原因" class="headerlink" title="结果发散的原因"></a>结果发散的原因</h2><blockquote><p>是体系的能量不守恒</p></blockquote><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2 \omega^2+m g \ell(1-\cos \theta) .</script><p>小 $\theta$ 有近似</p><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2\left(\omega^2+\frac{g}{\ell} \theta^2\right) .</script><p>使用欧拉方法进行转化</p><script type="math/tex; mode=display">E_{i+1}=E_i+\frac{1}{2} m g \ell\left(\omega_i^2+\frac{g}{\ell} \theta_i^2\right)(\Delta t)^2</script><blockquote><p>其实只需要使用 $x<em>{i+1}=x_i+v</em>{i+1}dt$ 代替 $x<em>{i+1}=x_i+v</em>{i}dt$ 就可以一定程度上解决</p></blockquote><h2 id="使用Euler-Cromer方法进行模拟"><a href="#使用Euler-Cromer方法进行模拟" class="headerlink" title="使用Euler-Cromer方法进行模拟"></a>使用Euler-Cromer方法进行模拟</h2><p>对于简谐运动，运动方程的一般形式为</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><blockquote><p>采用 Euler-Cromer 方法求解 x 关于时间的函数，其中 $\alpha=1$ （为了方便，取 k=1 ）。这是简谐运动的一个关键特征。然后将程序扩展到处理 $\alpha=3$ 的情况。这是一个非简谐振子的例子。计算了几个不同振幅（在范围 0.2 到 1 内）下的振动周期，并证明现在运动的周期取决于振幅。</p></blockquote><h3 id="alpha-1-的情况"><a href="#alpha-1-的情况" class="headerlink" title="$\alpha=1$ 的情况"></a>$\alpha=1$ 的情况</h3><p>谐振子的 json 文档为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oscillator&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;oscillator1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator4&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator5&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们要研究这个函数的图像</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><p>先只取 $\alpha=1$ ,并且 $k=1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t = oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>当$\alpha=1$时得到图像1</p><p><img src="/img/excise3-4-1.png" alt="&quot;谐振子图像1&quot;"></p><p>当$\alpha=3$时得到图像2</p><p><img src="/img/excise3-4-2.png" alt="&quot;谐振子图像2&quot;"></p><h3 id="考虑振幅与周期的关系"><a href="#考虑振幅与周期的关系" class="headerlink" title="考虑振幅与周期的关系"></a>考虑振幅与周期的关系</h3><p>接下来我们给simple_oscillator类增加一个calculate_period()函数，用来计算谐振子的周期</p><blockquote><p>calculate_period() 是通过判断$x$是否在初始位置附近来确定周期大小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of oscillators with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance**<span class="number">3</span>*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t,<span class="variable language_">self</span>.period</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_period</span>(<span class="params">self</span>):</span><br><span class="line">        period_list=[]</span><br><span class="line">        period_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="number">5</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &lt;= <span class="number">0.05</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i-<span class="number">1</span>]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &gt;= <span class="number">0.05</span>:</span><br><span class="line">                period_list.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(period_list)):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                period_sum+=period_list[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                period_sum+=period_list[i]-period_list[i-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.period=period_sum*dt/<span class="built_in">len</span>(period_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate_period()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t , period= oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(period)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>模拟得到</p><div class="table-container"><table><thead><tr><th style="text-align:center">振幅</th><th style="text-align:center">周期</th></tr></thead><tbody><tr><td style="text-align:center">0.2</td><td style="text-align:center">35.20</td></tr><tr><td style="text-align:center">0.4</td><td style="text-align:center">18.28</td></tr><tr><td style="text-align:center">0.6</td><td style="text-align:center">12.26</td></tr><tr><td style="text-align:center">0.8</td><td style="text-align:center">9.22</td></tr><tr><td style="text-align:center">1.0</td><td style="text-align:center">7.38</td></tr></tbody></table></div><p>随着振幅增大，周期变小。</p><blockquote><p>一个直观的理解，当$\alpha&gt;1 $ 时，$-kx^\alpha$ 对 $x$ 更敏感，当$x$增大，波动会更强烈</p></blockquote><h3 id="理论解释"><a href="#理论解释" class="headerlink" title="理论解释"></a>理论解释</h3><p>对于前一个练习中 (3.9) 的非简谐振子，可以通过某些特殊函数来解析地获得振动周期关于 $\alpha$ 的一般值的关系。请进行这样的计算，并描述周期与振幅之间的关系如何取决于 $\alpha$ 的值。你能对这个结果给出一个物理解释吗？提示：如果将 (3.9) 的两边都乘以 $\frac{d x}{d t}$，然后对 $t$ 进行积分。这将导致速度和 x 之间的关系。</p><script type="math/tex; mode=display">\frac{dv}{dt}=-kx^\alpha</script><p>变换为</p><script type="math/tex; mode=display">\frac{dv}{dx}\frac{dx}{dt}=-kx^\alpha</script><script type="math/tex; mode=display">vdv=-kx^\alpha dx</script><p>积分得</p><script type="math/tex; mode=display">\frac{1}{2}v^2=-\frac{k}{\alpha+1}x^{\alpha+1}\bigg |_{t=0}^{t=t}</script><p>再利用$v=\frac{dx}{dt}$</p><script type="math/tex; mode=display">\frac{dx}{dt}=\sqrt{\frac{2k}{\alpha+1}(x^{\alpha+1}-x_0^{\alpha+1})}</script><script type="math/tex; mode=display">\frac{dx}{\sqrt{x^{\alpha+1}-x_0^{\alpha+1})}}=\sqrt{\frac{2k}{\alpha+1}}dt</script><p>这个积分无法解析表示，但是可以写成下式</p><script type="math/tex; mode=display">x=F(\sqrt{\frac{2k}{\alpha+1}}t)</script><p>其中$F(x)$是一个周期函数</p><p>那么$\sqrt{\frac{2k}{\alpha+1}}$随$\alpha$增大而减小，故周期增大</p>]]></content>
      
      
      <categories>
          
          <category> 计算物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算物理 </tag>
            
            <tag> 简谐振动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热力学与统计力学之均匀介质热力学</title>
      <link href="/2024/10/23/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9D%87%E5%8C%80%E4%BB%8B%E8%B4%A8%E7%83%AD%E5%8A%9B%E5%AD%A6/"/>
      <url>/2024/10/23/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9D%87%E5%8C%80%E4%BB%8B%E8%B4%A8%E7%83%AD%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="热力学与统计力学"><a href="#热力学与统计力学" class="headerlink" title="热力学与统计力学"></a>热力学与统计力学</h1><h2 id="第二章-均匀介质热力学"><a href="#第二章-均匀介质热力学" class="headerlink" title="第二章 均匀介质热力学"></a>第二章 均匀介质热力学</h2><h3 id="2-2-麦克斯韦关系式"><a href="#2-2-麦克斯韦关系式" class="headerlink" title="2.2 麦克斯韦关系式"></a>2.2 麦克斯韦关系式</h3><p>对 $pVT$ 系统，其热力学能、焓、自由能和吉布斯函数的微分式分别为</p><script type="math/tex; mode=display">\mathrm{d}U=\quad T\mathrm{d}\mathrm{S}-p\mathrm{d}V \tag{2.2.1}</script><script type="math/tex; mode=display">\mathrm{d}H=\quad T\mathrm{d}S+V\mathrm{d}p \tag{2.2.2}</script><script type="math/tex; mode=display">\mathrm{d}F=-S\mathrm{d}T-p\mathrm{d}V \tag{2.2.3}</script><script type="math/tex; mode=display">\mathrm{d}G=-S\mathrm{d}T+V\mathrm{d}p \tag{2.2.4}</script><p>根据全微分条件有</p><script type="math/tex; mode=display">\left(\frac{\partial p}{\partial S}\right)_{V}=-\left(\frac{\partial T}{\partial V}\right)_{S} \tag{2.2.5}</script><script type="math/tex; mode=display">\left(\frac{\partial V}{\partial S}\right)_{p}=\quad\left(\frac{\partial T}{\partial p}\right)_{S} \tag{2.2.6}</script><script type="math/tex; mode=display">\left(\frac{\partial S}{\partial V}\right)_{T}=\quad\left(\frac{\partial p}{\partial T}\right)_{V} \tag{2.2.7}</script><script type="math/tex; mode=display">\left(\frac{\partial S}{\partial p}\right)_{T}=-\left(\frac{\partial V}{\partial T}\right)_{p} \tag{2.2.8}</script><blockquote><p>右下角的$p,V,T,S$ 表示该偏导是在右下角量不变的情况下进行的，这非常重要，当我们遇到这些量出现在偏导中时，它们往往代表着这个偏导为零，这可能可以为我们化简大量公式</p></blockquote><p>上述 $4$ 个关系式叫做<strong>麦克斯韦关系式</strong>，它们把实验上不容易直接测量的量(关系式左边)用易于测量的量(关系式右边)表示出来，它们有这些应用</p><blockquote><p>具体的推导是利用了</p><script type="math/tex; mode=display">df=\frac{\partial f}{\partial x}dx+\frac{\partial f}{\partial y}dy</script><p>有混合偏导成立</p><script type="math/tex; mode=display">\frac{\partial^2 f}{\partial x\partial y}=\frac{\partial^2 f}{\partial y\partial x}</script><p>考虑一个有趣的公式，它可以可以利用雅可比行列式性质证明</p><script type="math/tex; mode=display">\frac{\partial(T, S)}{\partial(x, y)}=\frac{\partial(p, V)}{\partial(x, y)}</script><p>它可以可以利用雅可比行列式性质证明</p><p>由</p><script type="math/tex; mode=display">\scriptsize T\mathrm{d}S=T\left(\frac{\partial S}{\partial x}\right)_y\mathrm{d}x+T\left(\frac{\partial S}{\partial y}\right)_x\mathrm{d}y</script><script type="math/tex; mode=display">\scriptsize \begin{aligned}\text{TdS}& =\mathrm{d}U+p \mathrm{d}V=\Big(\frac{\partial U}{\partial x}\Big)_{y}\mathrm{d}x+\Big(\frac{\partial U}{\partial y}\Big)_{x}\mathrm{d}y+p\Big[\Big(\frac{\partial V}{\partial x}\Big)_{y}\mathrm{d}x+\Big(\frac{\partial V}{\partial y}\Big)_{x}\mathrm{d}y\Big] \\&=\biggl[\left(\frac{\partial U}{\partial x}\right)_{y}+p\left(\frac{\partial V}{\partial x}\right)_{y}\biggr] \mathrm{d}x+\biggl[\left(\frac{\partial U}{\partial y}\right)_{x}+p\left(\frac{\partial V}{\partial y}\right)_{x}\biggr] \mathrm{d}y\end{aligned}</script><p>比较得</p><script type="math/tex; mode=display">\scriptsize T\left(\frac{\partial S}{\partial x}\right)_{y}=\left(\frac{\partial U}{\partial x}\right)_{y}+p\left(\frac{\partial V}{\partial x}\right)_{y}\\T\left(\frac{\partial S}{\partial y}\right)_{x}=\left(\frac{\partial U}{\partial y}\right)_{x}+p\left(\frac{\partial V}{\partial y}\right)_{x}</script><script type="math/tex; mode=display">\scriptsize T \frac{\partial^{2}S}{\partial x\partial y}+\left(\frac{\partial T}{\partial y}\right)_{x} \left(\frac{\partial S}{\partial x}\right)_{y}=\frac{\partial^{2}U}{\partial x\partial y}+p \frac{\partial^{2}V}{\partial x\partial y}+\left(\frac{\partial p}{\partial y}\right)_{x} \left(\frac{\partial V}{\partial x}\right)_{y}\\T \frac{\partial^{2}S}{\partial x\partial y}+\left(\frac{\partial T}{\partial x}\right)_{y} \left(\frac{\partial S}{\partial y}\right)_{x}=\frac{\partial^{2}U}{\partial x\partial y}+p \frac{\partial^{2}V}{\partial x\partial y}+\left(\frac{\partial p}{\partial x}\right)_{y} \left(\frac{\partial V}{\partial y}\right)_{x}</script><p>两式相减得</p><script type="math/tex; mode=display">\scriptsize \frac{\partial(T, S)}{\partial(x, y)}=\frac{\partial(p, V)}{\partial(x, y)}</script><p>其中$x,y$可分别取$S,T,p,V$ 得到麦克斯韦关系式</p></blockquote><font face="楷体" size="5"> 1.熵的计算公式</font><p>若以 $T$ 和 $V$ 为自变量，则</p><script type="math/tex; mode=display">\mathrm{d}S=\left(\frac{\partial S}{\partial T}\right)_{V}\mathrm{d}T+\left(\frac{\partial S}{\partial V}\right)_{T}\mathrm{d}V\tag{2.2.9}</script><p>从而</p><script type="math/tex; mode=display">T\mathrm{d}S=T\Big(\frac{\partial S}{\partial T}\Big)_{V}\mathrm{d}T+T\Big(\frac{\partial S}{\partial V}\Big)_{T}\mathrm{d}V\tag{2.2.10}</script><p>利用式 $(2.2.7)$ 及</p><script type="math/tex; mode=display">C_{V}=\lim_{\stackrel{\Delta T\to 0}{\Delta V=0}}\frac{\Delta Q}{\Delta T}=T\Big(\frac{\partial S}{\partial T}\Big)_{V}\tag{2.2.11}</script><p>式 $(2.2.10)$ 可写成</p><script type="math/tex; mode=display">\boxed{T\mathrm{d}S=C_{V}\mathrm{d}T+T\Big(\frac{\partial p}{\partial T}\Big)_{V}\mathrm{d}V\tag{2.2.12}}</script><p>若以 $T$ 和 $p$ 为自变量，类似地则有</p><script type="math/tex; mode=display">T\mathrm{d}S=T\Big(\frac{\partial S}{\partial T}\Big)_p\mathrm{d}T+T\Big(\frac{\partial S}{\partial p}\Big)_T\mathrm{d}p\tag{2.2.13}</script><p>利用式 $(2.2.8)$ 及定压热容的定义，式 $(2.2.13)$ 可改写成</p><script type="math/tex; mode=display">\boxed{T\mathrm{d}S=C_{p}\mathrm{d}T-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\mathrm{d}p\tag{2.2.14}}</script><p>式 $(2.2.12)$ 和式 $(2.2.14)$ 都叫做$TdS$ <strong>方程</strong>，它们是熵的计算公式，只要知道系统的热容量和物态方程，原则上便可以确定其熵。</p><blockquote><p>可以推导式子 $\left(\frac{\partial C<em>{V}}{\partial V}\right)</em>{T}=T\left(\frac{\partial^{2}p}{\partial T^{2}}\right)_{V}$ 来认识$C_V$, $C_p$ 与$S$的关系</p><script type="math/tex; mode=display">\begin{aligned}\left(\frac{\partial C_{V}}{\partial V}\right)_{\tau}& =\left[\frac{\partial}{\partial V}T\left(\frac{\partial S}{\partial T}\right)_{V}\right]_{T}=T\frac{\partial^{2}S}{\partial V\partial T}=T\left[\frac{\partial}{\partial T}\left(\frac{\partial S}{\partial V}\right)_{T}\right]_{V} \\&=T\left[\frac{\partial}{\partial T}\left(\frac{\partial p}{\partial T}\right)_{V}\right]_{V}=T\left(\frac{\partial^{2}p}{\partial T^{2}}\right)_{V}\end{aligned}</script></blockquote><font face="楷体" size="5"> 2.热力学能的计算公式 </font><p>通常以 $T$ 和 $V$ 为自变量计算热力学能比较方便。将式 $(2.2.12)$ 代入式 $(2.2.1)$ 即得到热力学能的计算公式</p><script type="math/tex; mode=display">\mathrm{d}U=C_V\mathrm{d}T+\biggl[T\biggl(\frac{\partial p}{\partial T}\biggr)_V-p\biggr]\mathrm{d}V\tag{2.2.15}</script><p>对照</p><script type="math/tex; mode=display">\mathrm{d}U=\left(\frac{\partial U}{\partial T}\right)_{V}\mathrm{d}T+\left(\frac{\partial U}{\partial V}\right)_{T}\mathrm{d}V\tag{2.2.16}</script><p>有</p><script type="math/tex; mode=display">\boxed{\left(\frac{\partial U}{\partial V}\right)_T=\left[T\left(\frac{\partial p}{\partial T}\right)_V-p\right]\mathrm{d}V\tag{2.2.17}}</script><p>利用式 $(2.2.17)$ 即可计算内压强。</p><font face="楷体" size="5"> 3.$C_p-C_V$的值 </font><p>相对说来，定容热容量较难测量，为此，可以先确定 $C_p-C_V$ 。从式 $(2.2.12)$ 和式 $(2.2.14)$ 可知</p><script type="math/tex; mode=display">C_{V}\mathrm{d}T+T\Big(\frac{\partial p}{\partial T}\Big)_{V}\mathrm{d}V=C_{p}\mathrm{d}T-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\mathrm{d}p\tag{2.2.18}</script><p>将 $T$ 视为 $p$ 和 $V$ 的函数，则有</p><script type="math/tex; mode=display">\mathrm{d}T=\left(\frac{\partial T}{\partial p}\right)_{v}\mathrm{d}p+\left(\frac{\partial T}{\partial V}\right)_{p}\mathrm{d}V\tag{2.2.19}</script><p>将式 $(2.2.19)$ 代入式 $(2.2.18)$ 得</p><script type="math/tex; mode=display">\left[(C_{p}-C_{V})\left(\frac{\partial T}{\partial p}\right)_{V}-T\left(\frac{\partial V}{\partial T}\right)_{p}\right]\mathrm{d}p</script><script type="math/tex; mode=display">\quad+\left[(C_{p}-C_{V})\left(\frac{\partial T}{\partial V}\right)_{p}-T\left(\frac{\partial p}{\partial T}\right)_{V}\right]\mathrm{d}V=0\tag{2.2.20}</script><p>因为 $p$ 和 $V$ 是独立变量，所以</p><script type="math/tex; mode=display">\left[ (C_{p}-C_{V})\left(\frac{\partial T}{\partial p}\right)_{V}-T\left(\frac{\partial V}{\partial T}\right)_{p}\right]\mathrm{d}p=0</script><script type="math/tex; mode=display">\left[ (C_{p}-C_{V})\left(\frac{\partial T}{\partial V}\right)_{p}-T\left(\frac{\partial p}{\partial T}\right)_{V}\right]\mathrm{d}V=0 \tag{2.2.21}</script><p>由此可得</p><script type="math/tex; mode=display">\boxed {C_p-C_V=T\Big(\frac{\partial V}{\partial T}\Big)_p\Big(\frac{\partial p}{\partial T}\Big)_V}\tag{2.2.22}</script><blockquote><p>思考：计算范德瓦尔斯方程的定压膨胀系数、定容压强系数、定温压缩系数</p></blockquote><p>可见，只要系统物态方程已知，由式 $(2.2.22)$ 便可计算出 $C_p$ 与 $C_V$ 利用定压膨胀系数和等温压缩系数的定义式</p><script type="math/tex; mode=display">\alpha =\frac{1}{V}\Big(\frac{\partial V}{\partial T}\Big)_{_p} \quad,\quad \kappa=-\frac{1}{V}\Big(\frac{\partial V}{\partial p}\Big)_{_T}\tag{2.2.23}</script><p>以及关系式</p><script type="math/tex; mode=display">\left(\frac{\partial V}{\partial T}\right)_{p}\left(\frac{\partial T}{\partial p}\right)_{V}\left(\frac{\partial p}{\partial V}\right)_{T}=-1\tag{2.2.24}</script><p>式 $(2.2.22)$ 可改写成</p><script type="math/tex; mode=display">\boxed{C_{p}-C_{V}=-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\Big(\frac{\partial p}{\partial V}\Big)_{T}=\frac{TV\alpha^{2}}{\kappa}\tag{2.2.25}}</script><p>从式 $(2.2.12)$ 、式 $(2.2.14)$ 、式 $(2.2.15)$ 和式 $(2.2.22)$ 可知，只要知道系统的定压热容量和物态方程，原则上便可以确定其热力学能和熵以及其他热力学函数。</p><blockquote><p><strong>热力学微分关系总结</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">热力学函数</th><th style="text-align:center">$U$</th><th style="text-align:center">$H=U+PV$</th><th style="text-align:center">$F=U-TS$</th><th style="text-align:center">$G=H-TS$</th></tr></thead><tbody><tr><td style="text-align:center"><strong>热力学基本方程</strong></td><td style="text-align:center">$dU=TdS-pdV$</td><td style="text-align:center">$dH=TdS+Vdp$</td><td style="text-align:center">$dF=-SdT-pdV$</td><td style="text-align:center">$dG=-SdT+Vdp$</td></tr><tr><td style="text-align:center"><strong>热力学偏导数</strong></td><td style="text-align:center"><script type="math/tex">\begin{aligned}T=\left(\frac{\partial U}{\partial S}\right)_{V}\\p=-\left(\frac{\partial U}{\partial V}\right)_{S}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}T=\left(\frac{\partial H}{\partial S}\right)_{p}\\V=\left(\frac{\partial H}{\partial p}\right)_{S}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}S=-\left(\frac{\partial F}{\partial T}\right)_{V}\\p=-\left(\frac{\partial F}{\partial V}\right)_{T}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}&S=-\left(\frac{\partial G}{\partial T}\right)_{p}\\&V=\left(\frac{\partial G}{\partial p}\right)_{T}\end{aligned}</script></td></tr><tr><td style="text-align:center"><strong>麦克斯韦关系</strong></td><td style="text-align:center">$\left(\frac{\partial T}{\partial V}\right)_S=-\left(\frac{\partial p}{\partial S}\right)_V$</td><td style="text-align:center">$\left(\frac{\partial T}{\partial p}\right)_S=\left(\frac{\partial V}{\partial S}\right)_p$</td><td style="text-align:center">$\left(\frac{\partial p}{\partial T}\right)_V=\left(\frac{\partial S}{\partial V}\right)_T$</td><td style="text-align:center">$-\left(\frac{\partial V}{\partial T}\right)_p=\left(\frac{\partial S}{\partial p}\right)_T$</td></tr></tbody></table></div></blockquote>]]></content>
      
      
      <categories>
          
          <category> 热力学与统计力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 热力学与统计力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hoomd-blue Two Dimension Particles Simulation</title>
      <link href="/2024/10/20/Hoomd-blue/"/>
      <url>/2024/10/20/Hoomd-blue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://glotzerlab.engin.umich.edu/hoomd-blue/">Hoomd-blue</a>一款分子动力学模拟软件，由University of Michigan开发，开源于<a href="https://github.com/glotzerlab/hoomd-blue">github</a>，学习其详细内容可参考它的<a href="https://hoomd-blue.readthedocs.io/en/v4.8.2/">官方文档</a>和<a href="https://github.com/glotzerlab/hoomd-examples">github实例</a>。</p><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>Ethan在此之前计算机只有python基础课水平，没有独立参加过项目，所以学习了较长时间（断断续续有一个月），才将其基础搞懂，开始复现一篇论文中的结果，这篇论文（<a href="https://arxiv.org/abs/2310.10551">A geometry-originated universal relation for arbitrary convex hard particles</a>）是导师要求学习的，但是没有想到看似简单的文章要学习和复现难度也如此大。frustrating</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>论文主体上围绕一个公式展开</p><script type="math/tex; mode=display">\lim\limits_{\overset{N\to\infty}{N/V=\rho}}\frac{1}{N}\ln(\prod\limits_{i=1}^{N}\frac{P_{N+1}}{P_{i}})=-\frac{\tilde{s}(0+)}{2d}</script><p>我也大概理解公式的意思，不过可能这也足够。左右侧都表征某种密度分布，左侧是用插入粒子来体现，右侧用多少粒子靠拢的程度来表征，公式的详细推导在论文里有。</p><h1 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h1><p>经过对官方文档孜孜不倦的学习，开始尝试写代码，（Hoomd文档没有类似的例子，这代码是真难写啊）。自认为代码非常粗糙，是Ethan在半知半解的调用函数和疯狂骚扰ChatGpt之后弄出来的结果：&gt;</p><h2 id="插入成功几率函数"><a href="#插入成功几率函数" class="headerlink" title="插入成功几率函数"></a>插入成功几率函数</h2><p>为了得到插入成功的概率就需要一个能连续向体系中插入单个粒子的函数，不懈努力后，成功生造了一个在体系中插入粒子的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_triangle</span>(<span class="params">simulation, mc,times=<span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在现有的 HOOMD 模拟中随机插入指定数量的三角形粒子，并检测与已有粒子是否重叠。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    simulation: hoomd.Simulation 对象，表示现有的模拟。</span></span><br><span class="line"><span class="string">    mc: hoomd的hpmc，蒙特卡洛积分器</span></span><br><span class="line"><span class="string">    times：重复插入的次数，次数越大准确度越高</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义三角形的顶点，中心在 (0, 0)</span></span><br><span class="line">    <span class="comment">#a = 1.0  # 边长</span></span><br><span class="line">    <span class="comment">#h = np.sqrt(3) / 2 * a  # 等边三角形的高</span></span><br><span class="line">    <span class="comment">#vertices = [(-a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(0, 2*h/3)]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 HPMC 积分器</span></span><br><span class="line">    <span class="comment">#mc = hoomd.hpmc.integrate.ConvexPolygon()</span></span><br><span class="line">    <span class="comment">#mc.shape[&#x27;A&#x27;] = &#123;&#x27;vertices&#x27;: vertices&#125;</span></span><br><span class="line"></span><br><span class="line">    new_mc = hoomd.hpmc.integrate.ConvexPolygon()</span><br><span class="line">    new_mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将积分器添加到模拟中</span></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模拟盒尺寸</span></span><br><span class="line">    box = simulation.state.box</span><br><span class="line">    Lx = box.Lx</span><br><span class="line">    Ly = box.Ly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取粒子类型的索引</span></span><br><span class="line">    type_id = simulation.state.particle_types.index(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始插入粒子</span></span><br><span class="line">    inserted_recorder=<span class="number">0</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    old_snap = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; times:</span><br><span class="line">        attempts += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 随机生成位置</span></span><br><span class="line">        x = np.random.uniform(-Lx/<span class="number">2</span>, Lx/<span class="number">2</span>)</span><br><span class="line">        y = np.random.uniform(-Ly/<span class="number">2</span>, Ly/<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#print(x,y)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机生成取向（四元数表示）</span></span><br><span class="line">        <span class="comment">#theta = np.random.uniform(0, 2*np.pi)</span></span><br><span class="line">        <span class="comment">#orientation = [np.cos(theta/2), 0, 0, np.sin(theta/2)]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入粒子</span></span><br><span class="line">        <span class="keyword">if</span> old_snap.communicator.rank == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录旧的粒子数量</span></span><br><span class="line">            N_old = old_snap.particles.N</span><br><span class="line">            <span class="comment"># 新的粒子数量</span></span><br><span class="line">            N_new = N_old + <span class="number">1</span></span><br><span class="line">            theta = np.random.uniform(<span class="number">0</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 创建一个新的快照，具有更多的粒子</span></span><br><span class="line">            new_snap = hoomd.Snapshot()</span><br><span class="line">            new_snap.particles.N = N_new</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制盒子尺寸</span></span><br><span class="line">            new_snap.configuration.box = old_snap.configuration.box</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化粒子类型</span></span><br><span class="line">            new_snap.particles.types = old_snap.particles.types</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化属性数组</span></span><br><span class="line">            new_snap.particles.position[:] = np.zeros((N_new, <span class="number">3</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.orientation[:] = np.zeros((N_new, <span class="number">4</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制旧的粒子数据</span></span><br><span class="line">            new_snap.particles.position[:N_old] = old_snap.particles.position[:]</span><br><span class="line">            new_snap.particles.orientation[:N_old] = old_snap.particles.orientation[:]</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 设置新粒子的属性</span></span><br><span class="line">            new_snap.particles.position[N_old] = [x, y, <span class="number">0</span>]</span><br><span class="line">            new_snap.particles.orientation[N_old] = [np.cos(theta/<span class="number">2</span>), <span class="number">0</span>, <span class="number">0</span>, np.sin(theta/<span class="number">2</span>)]</span><br><span class="line">            new_snap.particles.typeid[N_old] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果有其他属性（如 charge、diameter 等），也需要进行同样的处理</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_snap = <span class="literal">None</span>  <span class="comment"># 非主进程设置为 None</span></span><br><span class="line"></span><br><span class="line">        cpu = hoomd.device.CPU()</span><br><span class="line">        new_simulation = hoomd.Simulation(device=cpu,seed=<span class="number">1</span>)</span><br><span class="line">        new_simulation.create_state_from_snapshot(new_snap)</span><br><span class="line">        new_simulation.operations.integrator = new_mc</span><br><span class="line">        <span class="comment">#check_snapshot=simulation.state.get_snapshot()</span></span><br><span class="line">        <span class="comment">#render(check_snapshot)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.typeid)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.position)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查重叠</span></span><br><span class="line">        new_simulation.run(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> new_mc.overlaps &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print(f&quot;检测到重叠，移除粒子 &#123;inserted&#125;&quot;)</span></span><br><span class="line">            <span class="comment">#remove_particle(simulation, simulation.state.N_particles - 1)</span></span><br><span class="line">            <span class="comment">#print(new_mc.overlaps)</span></span><br><span class="line">            <span class="comment">#print(new_mc.shape)</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment">#print(mc.overlaps)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inserted_recorder += <span class="number">1</span></span><br><span class="line">        simulation.state.set_snapshot(old_snap)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inserted_recorder</span><br></pre></td></tr></table></figure><p>需要了解的是，在hoomd中一般有两种储存粒子状态的方式，一种是GSD文件，方便更改，可以从外部轻松访问;另一种是snapshot，多用于在代码环境中储存系统信息，方便调用和删除释放内存。</p><h2 id="SDF函数"><a href="#SDF函数" class="headerlink" title="SDF函数"></a>SDF函数</h2><p>SDF是scale distribution function的简称，中文尺度分布函数，毫无头绪。它是怎么一回事呢，假如体系粒子间的间隔同等乘以一个系数$1-x$（粒子之间的距离是中心与中心的距离）,那么有一定数量的粒子相碰，就可以计正好相碰（只有正好在<script type="math/tex">1-x</script>相碰的粒子才算数）的粒子数为<script type="math/tex">S(x)</script>，好在这个函数是hoomd官方有的函数，不用现成写，只需要调用就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdf_compute = hoomd.hpmc.compute.SDF(xmax=xmax, dx=dx)</span><br><span class="line">sdf_xcompression = sdf_compute.x_compression</span><br><span class="line">sdf_compression = sdf_compute.sdf_compression</span><br></pre></td></tr></table></figure><p>此处SDF有两个重要的量可以通过类访问，x_compression和sdf_compression，它们分别是收缩时每一步的x和该x对应的sdf（x），两者都是numpy的array，所以我们后续很方便的就可以进行绘图</p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>这一部分较简单且在hoomd的文档中花大篇幅和多个例子进行说明了，这里就不赘述原理，只针对本论文要求给出初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_particle</span>(<span class="params">N_particles</span>):</span><br><span class="line">    <span class="comment">#生成一个有N_particles的有序粒子群</span></span><br><span class="line">    spacing = <span class="number">2</span></span><br><span class="line">    K = math.ceil(N_particles ** (<span class="number">1</span> / <span class="number">2</span>))</span><br><span class="line">    L = K * spacing</span><br><span class="line">    x = np.linspace(-L / <span class="number">2</span>, L / <span class="number">2</span>, K, endpoint=<span class="literal">False</span>)</span><br><span class="line">    position_2d = <span class="built_in">list</span>(itertools.product(x, repeat=<span class="number">2</span>))  <span class="comment"># 生成二维网格上的粒子位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取前 N_particles 个位置</span></span><br><span class="line">    positions_2d = np.array(position_2d[<span class="number">0</span>:N_particles])  <span class="comment"># 形状为 (N_particles, 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加第三个坐标（z 坐标），设为零</span></span><br><span class="line">    z_coordinates = np.zeros((N_particles, <span class="number">1</span>))  <span class="comment"># 形状为 (N_particles, 1)</span></span><br><span class="line">    positions_3d = np.hstack((positions_2d, z_coordinates))  <span class="comment"># 合并为 (N_particles, 3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 GSD 帧并设置粒子属性</span></span><br><span class="line">    frame = gsd.hoomd.Frame()</span><br><span class="line">    frame.particles.N = N_particles</span><br><span class="line">    frame.particles.position = positions_3d  <span class="comment"># 现在是 (N_particles, 3) 的数组</span></span><br><span class="line">    frame.particles.typeid = [<span class="number">0</span>] * N_particles</span><br><span class="line">    frame.configuration.box = [L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 注意这里的盒子尺寸</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一个快照</span></span><br><span class="line">    snapshot=hoomd.Snapshot()</span><br><span class="line">    snapshot.particles.N = N_particles</span><br><span class="line">    snapshot.particles.position[:] = positions_3d</span><br><span class="line">    snapshot.particles.typeid[:] = [<span class="number">0</span>] * N_particles</span><br><span class="line">    snapshot.particles.types=[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">    snapshot.configuration.box=[L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> snapshot</span><br></pre></td></tr></table></figure><p>生成一个具有N_particles个粒子的体系，密度恒定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">randomizing_particles</span>(<span class="params">snapshot,times=<span class="number">10e3</span></span>):</span><br><span class="line">    cpu = hoomd.device.CPU()</span><br><span class="line">    simulation = hoomd.Simulation(device=cpu, seed=<span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    mc = hoomd.hpmc.integrate.ConvexPolygon(default_d=<span class="number">0.3</span>,default_a=<span class="number">0.4</span>)</span><br><span class="line">    mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    simulation.create_state_from_snapshot(snapshot)</span><br><span class="line">    initial_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    simulation.run(times)</span><br><span class="line">    final_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_snapshot,mc,simulation</span><br></pre></td></tr></table></figure><p>随机化这个粒子体系，times是MC随机化的步数</p><p>顺便一提，hoomd的官方文档的图像生成函数是基于 <a href="https://fresnel.readthedocs.io/en/v0.13.6/">fresnel</a>的三维图像生成函数。功能很强，但是我要做二维的体系，用不上：&lt; </p><p>我就自己基于<a href="https://matplotlib.org/">matplotlib</a>写了一个二维图像生成函数（目前只支持展现粒子的位置，都是圆形的粒子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">snapshot, dims=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从gsd文件生成一个二维的粒子群图像,目前仅支持圆粒子图.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Extract particle positions and convert to a NumPy array</span></span><br><span class="line">    positions = np.asarray(snapshot.particles.position)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check dimensions (only 2D is supported in this function)</span></span><br><span class="line">    <span class="keyword">if</span> dims != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Only 2D rendering is supported in this function.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot particles</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.scatter(positions[:, <span class="number">0</span>], positions[:, <span class="number">1</span>], s=<span class="number">10</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Particle positions from GSD snapshot&#x27;</span>)</span><br><span class="line">    plt.gca().set_aspect(<span class="string">&#x27;equal&#x27;</span>, adjustable=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h1 id="模拟与调教"><a href="#模拟与调教" class="headerlink" title="模拟与调教"></a>模拟与调教</h1><p>进行中！！</p>]]></content>
      
      
      <categories>
          
          <category> Hoomd-blue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hoomd-blue </tag>
            
            <tag> 分子模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>We Are the World</title>
      <link href="/2024/10/20/we-are-the-world/"/>
      <url>/2024/10/20/we-are-the-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到OldCabbage的博客</p><h1 id="此刻，世界由我们塑造"><a href="#此刻，世界由我们塑造" class="headerlink" title="此刻，世界由我们塑造"></a>此刻，世界由我们塑造</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;We Are the World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以叫我Ethan或者oldcabbage，从此我在网络世界里有了一块地皮。<br>这个博客记录我的思考、对世界的认识，Ethan主业是物理，所以关于物理的内容会稍微专业，其他的内容是半外行的，不过应该也有许多参考价值。<br>Ethan将要分享的，当然是以一个男孩的视角观世界，但绝对不止于此，世界之变化、美好的瞬间都希望能与你们共有。</p><p><img src="https://images.nationalgeographic.org/image/upload/v1652341068/EducationHub/photos/ocean-waves.jpg" alt="图1" title="大海"></p><h1 id="世界不是痛苦！"><a href="#世界不是痛苦！" class="headerlink" title="世界不是痛苦！"></a>世界不是痛苦！</h1><p>2020年一场疫情袭击全球，多少人的痛苦记忆被唤醒，世界不只是stocks market、大国博弈，我们的生存似乎被某种梦纱掩盖，忘了世界的贫富差距如此巨大，人与人的自私与博弈在逐渐放大，只因为有人说只要你自私就是对大家好。<br>多少人忘记尊重他人，忘记如何去爱，最后也忘了尊重自己。<br>或许有天我们还会手牵手</p><p><img src="https://data.unicef.org/wp-content/uploads/2019/02/UN0239545.jpg" alt="图2" title="手牵手"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
