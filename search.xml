<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>复现与展望——源自几何对凸粒子普适的公式</title>
      <link href="/2025/05/20/%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%B1%95%E6%9C%9B%E2%80%94%E2%80%94%E6%BA%90%E8%87%AA%E5%87%A0%E4%BD%95%E5%AF%B9%E5%87%B8%E7%B2%92%E5%AD%90%E6%99%AE%E9%80%82%E7%9A%84%E5%85%AC%E5%BC%8F/"/>
      <url>/2025/05/20/%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%B1%95%E6%9C%9B%E2%80%94%E2%80%94%E6%BA%90%E8%87%AA%E5%87%A0%E4%BD%95%E5%AF%B9%E5%87%B8%E7%B2%92%E5%AD%90%E6%99%AE%E9%80%82%E7%9A%84%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复现与展望——源自几何对凸粒子普适的公式"><a href="#复现与展望——源自几何对凸粒子普适的公式" class="headerlink" title="复现与展望——源自几何对凸粒子普适的公式"></a>复现与展望——源自几何对凸粒子普适的公式</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>我们讨论的硬凸粒子系统，其相互作用势是一种排斥性的$\delta$势，具有一定的“纯粹性”。原论文将注意力放在一个源自几何关系的对所有凸粒子皆成立的恒等式上，采用python的软件包HOOMD-bule完成对问题的模拟，我也跟随相同的路线进行工作。在复现完成后，我将视线放到凹粒子的群上，它们的研究方法相似，不过凹粒子的属性更加多样，许多常见的物品实际上是凹的，如字母H，五角星等等。</p><p>我们回到关键的恒等式上来</p><script type="math/tex; mode=display">\lim_{\substack{N \to \infty \\ N/V =\rho}} \, \frac{1}{N} \ln (\prod_{i=1}^{N} \frac{P_{N+1}}{P_{i}} ) = -\frac{\tilde{s}(0+) }{2d}.</script><p>指定分子数密度N，调整密度为$N/V=\rho$ ，此时固定V，可以开始研究从1到N的粒子数在这样的V下随机组合的粒子群，我们在某些数目的粒子群中执行插入一个粒子的操作从而得到插入粒子的概率$P_i$，即为在$i-1$个粒子的群中插入一个粒子的成功率。</p><p>等式右侧的$\tilde{s}(x)$为尺寸分布函数，在原论文中有详细介绍。$\mathrm{d}$则是空间的维度。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>在conda环境下进行HOOMD-blue包的安装，具体参见<a href="https://hoomd-blue.readthedocs.io/en/v5.1.1/installation.html">HOOMD-blue的安装教程</a>。需要注意的是HOOMd-blue需要Linux环境，并且在利用<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">WSL</a>实现的虚拟机无法调用GPU进行运算，代码开源于<a href="https://github.com/glotzerlab/hoomd-blue">github</a>,可以通过终端命令下载源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/glotzerlab/hoomd-blue.git</span><br></pre></td></tr></table></figure><h2 id="代码构建"><a href="#代码构建" class="headerlink" title="代码构建"></a>代码构建</h2><h3 id="主体架构"><a href="#主体架构" class="headerlink" title="主体架构"></a>主体架构</h3><p>完成论文的代码开源于<a href="https://github.com/old-cabbage/Particle-Move-with-HOOMD-blue">https://github.com/old-cabbage/Particle-Move-with-HOOMD-blue</a>，架构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Particle/</span><br><span class="line">├─concave    </span><br><span class="line">├─convex  </span><br><span class="line">├─mixture  </span><br><span class="line">└─result</span><br><span class="line">    ├─concave</span><br><span class="line">    ├─convex</span><br><span class="line">    └─sdf</span><br><span class="line">        ├─concave     </span><br><span class="line">        ├─convex      </span><br><span class="line">        └─mixture</span><br></pre></td></tr></table></figure><p>system.py文件将粒子群本身作为一个类，将论文所需要的操作变为类本身的函数，可以大大简化调整关键参数的修改过程。主要需要修改的文件是 particle-move. py，通过调整相应的粒子种类，实验需要模拟的次数来实现。这里我们的粒子群实际是以.gsd文件保存的，由于需要生成大量的.gsd文件，故采用generate.py文件独立地生成粒子群，可以减少主程序的负担。result文件夹存放着蒙特卡洛模拟的结果，concave、convex文件夹中都有进行数据分析所需要的文件，可以快捷进行数据的可视化。</p><h3 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h3><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p>实现项目的计算量较大，一般需要在高算力服务器上进行，且很多工作是可以并行而不影响结果的，故文件都进行了适当的MPI并行处理，</p><p>在System类中，采用了两种方法生成粒子群，一种是直接让粒子在既定密度下有序排列，再执行打乱操作，增大粒子群的熵，适合密度不大和凸粒子的情况；另一种则是利用hoomd.hpmc.update中的QuickCompress类，添加其到Simulation.operations.updaters方法中，通过指定压缩方式和速度，可以实现逐步的将密度较小的体系压缩成高密度体系，并且体系的熵自然的增高。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#压缩体系</span><br><span class="line">initial_box = self.simulation.state.box</span><br><span class="line">final_box = hoomd.Box.from_box(initial_box)</span><br><span class="line">final_box.volume = self.simulation.state.N_particles * self.particle_area / self.packing_density</span><br><span class="line">compress = hoomd.hpmc.update.QuickCompress(</span><br><span class="line">    trigger=hoomd.trigger.Periodic(10), target_box=final_box</span><br><span class="line">)</span><br><span class="line">self.simulation.operations.updaters.append(compress)</span><br><span class="line">periodic = hoomd.trigger.Periodic(10)</span><br><span class="line">tune = hoomd.hpmc.tune.MoveSize.scale_solver(</span><br><span class="line">    moves=[&quot;a&quot;, &quot;d&quot;],</span><br><span class="line">    target=0.2,</span><br><span class="line">    trigger=periodic,</span><br><span class="line">    max_translation_move=5,</span><br><span class="line">    max_rotation_move=5,</span><br><span class="line">)</span><br><span class="line">self.simulation.operations.tuners.append(tune)</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>HOOMD-blue的hpmc中提供了FreeVolume方法计算体系的剩余体积，它是通过不断投入粒子实现的，故通过简单改变投入粒子的类型再对结果做一些处理即可得到需要的成功率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def random_insert(self,insert_times):</span><br><span class="line">self.fv=hoomd.hpmc.compute.FreeVolume(test_particle_type=self.shape, </span><br><span class="line">num_samples=insert_times)</span><br><span class="line">self.simulation.operations.computes.append(self.fv)</span><br><span class="line">self.success_insert = round(self.fv.free_volume * </span><br><span class="line">insert_times / self.simulation.state.box.volume)</span><br><span class="line">return self.success_insert</span><br></pre></td></tr></table></figure><p>在主程序中通过循环实现插入并更新体系的蒙特卡洛操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">iterations = 1000              # 循环次数</span><br><span class="line">moves_per_cycle = 5            # 每个循环中移动的步数</span><br><span class="line">insertions_per_cycle = 100000    # 每个循环中插入的粒子尝试次数</span><br><span class="line"></span><br><span class="line">total_success = 0</span><br><span class="line">total_attempts = 0</span><br><span class="line"></span><br><span class="line">print(&quot;\n开始进行循环模拟和插入测试...&quot;)</span><br><span class="line">simulation_start_time = time.time()</span><br><span class="line">for cycle in range(1, iterations + 1):</span><br><span class="line">    # 进行移动</span><br><span class="line">    system.simulation.run(moves_per_cycle)</span><br><span class="line">    </span><br><span class="line">    # 进行插入尝试  </span><br><span class="line">    success = system.random_insert(</span><br><span class="line">        insert_times=insertions_per_cycle</span><br><span class="line">    )</span><br><span class="line">    total_success += success</span><br><span class="line">    total_attempts += insertions_per_cycle</span><br><span class="line"></span><br><span class="line">    # 可选：打印每个循环的结果</span><br><span class="line">    if cycle % (iterations // 10 ) == 0:</span><br><span class="line">        simulation_interval_time = time.time()</span><br><span class="line">        print(f&quot;循环 &#123;cycle&#125;/&#123;iterations&#125;: 成功插入 &#123;success&#125;/&#123;insertions_per_cycle&#125; 个粒子;</span><br><span class="line">        耗时: &#123;simulation_interval_time - simulation_start_time:.2f&#125; 秒&quot;)</span><br><span class="line"></span><br><span class="line">simulation_end_time = time.time()</span><br><span class="line">print(f&quot;\n堆叠密度为&#123;packing_density_0&#125;，粒子数为&#123;num_particles&#125;的循环模拟和插入测试完成，</span><br><span class="line">耗时: &#123;simulation_end_time - simulation_start_time:.2f&#125; 秒&quot;)</span><br><span class="line"># 计算最终的成功插入概率</span><br><span class="line">final_probability = total_success / total_attempts if total_attempts &gt; 0 else 0.0</span><br><span class="line">print(f&quot;最终插入成功概率: &#123;final_probability * 100:.5f&#125;% (&#123;total_success&#125;/&#123;total_attempts&#125;) ;</span><br><span class="line">ln(Pi)=&#123;math.log(final_probability)&#125;&quot;)</span><br></pre></td></tr></table></figure><h4 id="SDF计算"><a href="#SDF计算" class="headerlink" title="SDF计算"></a>SDF计算</h4><p>SDF的计算调用了HOOMD-blue的SDF函数，可以获得曲线，也可以直接SDF.P来直接计算SDF的截距，在system文件中通过以下操作实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def calculate_sdf(self,sdf_mc,sdf_xmax,sdf_dx,sdf_each_run):</span><br><span class="line">    self.total_sdf_sdfcompression=np.zeros(int(sdf_xmax/sdf_dx))</span><br><span class="line">    self.total_sdf_sdfexpansion=np.zeros(int(sdf_xmax/sdf_dx))</span><br><span class="line">    self.sdf_compute = hoomd.hpmc.compute.SDF(xmax=sdf_xmax, dx=sdf_dx)</span><br><span class="line">    self.simulation.operations.computes.append(self.sdf_compute)</span><br><span class="line">    #sdf_start_time=time.time()</span><br><span class="line">    print(&quot;sdf循环开始&quot;)</span><br><span class="line">    for i in range(sdf_mc):</span><br><span class="line">        self.simulation.run(sdf_each_run)</span><br><span class="line">        self.total_sdf_sdfcompression += self.sdf_compute.sdf_compression</span><br><span class="line">        self.total_sdf_sdfexpansion += self.sdf_compute.sdf_expansion</span><br><span class="line">        #if (i+1)%(sdf_mc//10)==0:</span><br><span class="line">        #    sdf_interval_time=time.time()</span><br><span class="line">        #    print(f&quot;循环已经进行了&#123;i+1&#125;次,耗时&#123;sdf_interval_time-sdf_start_time:.2f&#125;秒&quot;)</span><br><span class="line">    self.total_sdf_xcompression = self.sdf_compute.x_compression</span><br><span class="line">    self.total_sdf_xexpansion = self.sdf_compute.x_expansion</span><br><span class="line">    self.total_sdf_sdfcompression /= sdf_mc</span><br><span class="line">    self.total_sdf_sdfexpansion /= sdf_mc</span><br><span class="line">    return self.total_sdf_xcompression,self.total_sdf_xexpansion,self.total_sdf_sdfcompression,self.total_sdf_sdfexpansion</span><br></pre></td></tr></table></figure><p>\section{凸粒子的实验结果}</p><h3 id="插入概率"><a href="#插入概率" class="headerlink" title="插入概率"></a>插入概率</h3><p>与原论文相同，采用N=5000个粒子，每个数据点经过$10^9$以上次插入，得到$\mathrm{ln}(P_i)$随着粒子数增加的图线，当体系的密度过大时，$P_i$ 以极快的速度减小，在高密度体系中插入粒子十分困难，概率难以计算。</p><p><img src="/public/img/particles/result.png" alt=""></p><p><img src="/public/img/particles/convex-fit-0.5.png" alt="四次曲线拟合密度为0.5体系"></p><p>特别的，用四次曲线拟合$\mathrm{ln}(P_i)$可以获取曲线的部分性质，这里密度为0.5的曲线的四次拟合与论文中的数据相符合。</p><script type="math/tex; mode=display">    \mathrm{ln}(P_i)=-1.712\times10^{-15} i^4 - 1.697\times 10^{-11} i^3 - 7.424\times 10^{-8} i^2 - 5.721\times 10^{-3} i</script><h3 id="SDF"><a href="#SDF" class="headerlink" title="SDF"></a>SDF</h3><p>SDF计算结果的关键的横坐标与原论文相符合，这里亦选取密度为0.5的体系来分析，左图为随机选取了$10^4$个体系的SDF结果可视化的散点图，右图为根据原数据（$10^{9}$次SDF数值）而拟合出的正态曲线，与预期的标准正态曲线十分接近。</p><p><img src="/public/img/particles/sdf_analysis.png" alt="SDF数据的分析"></p><h2 id="凹粒子的展望"><a href="#凹粒子的展望" class="headerlink" title="凹粒子的展望"></a>凹粒子的展望</h2><p>凹粒子由于粒子形状复杂，并且库的优化弱于凸粒子，故计算难度远大于凸粒子，由于凹粒子的形态复杂，要研究凹粒子的问题势必要分析多种凹粒子的性质。一个与凸粒子不同地方是凹粒子的SDF不只有膨胀的SDF，还有压缩的SDF，在我们研究的恒等式上要加上一项。</p><script type="math/tex; mode=display">\lim_{\substack{N \to \infty \\ N/V =\rho}} \, \frac{1}{N} \ln (\prod_{i=1}^{N} \frac{P_{N+1}}{P_{i}} ) = -\frac{\tilde{s}(0+) + \tilde{s}(0-)}{2d}.</script><p>可是，这一项并不一定在所有凹粒子上都显现，对于H粒子，由于它非常的“凹”，可以观测到$\tilde{s}(0-)$项；但是对于V字粒子，它不是很“凹”，额外的这一项完全无法对压缩造成影响</p><p><img src="/public/img/particles/H粒子.png" alt="H字母形状的粒子"><br><img src="/public\img\particles/v粒子.png" alt="方形一侧以V字凹入的粒子"></p><p>对V字粒子的结果，我们进行了较为精确的计算，结果与公式符合的很好；对于H粒子，我们进行了定性的计算，发现密度较大时插入概率十分小，SDF的膨胀项对结果产生了显著的影响。由于计算能力受限，对个别密度的验证符合公式</p><p><img src="/public/img/particles/P.png" alt="V字凹粒子插入概率"><br><img src="/public/img/particles/sdf05.png" alt="密度为0.5的SDF曲线"></p><p>这项研究揭示了硬粒子系统中几何学和热力学之间复杂的相互作用。从熵、压强和化学势之间联系的基本热力学关系中出发，走到一个意料之外的地方，建立了一种对各种粒子成立的等式。</p>]]></content>
      
      
      <categories>
          
          <category> 热力学与统计力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 热力学与统计力学 </tag>
            
            <tag> HOOMD-blue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算物理之简谐振动</title>
      <link href="/2024/10/24/comphy-oscillator/"/>
      <url>/2024/10/24/comphy-oscillator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="讨论误差的影响"><a href="#讨论误差的影响" class="headerlink" title="讨论误差的影响"></a>讨论误差的影响</h2><p>考虑一个单摆我们可以先解析的求解</p><script type="math/tex; mode=display">F_\theta=-m g \sin \theta,</script><script type="math/tex; mode=display">F_\theta=m d^2s/dt^2</script><script type="math/tex; mode=display">\sin \theta \approx \theta</script><script type="math/tex; mode=display">\frac{d^2 \theta}{d t^2}=-\frac{g}{\ell} \theta</script><p>解析解</p><script type="math/tex; mode=display">\theta=\theta_0 \sin (\Omega t+\phi)</script><p>  这里 $\omega$ 是角速度</p><script type="math/tex; mode=display">\Omega=\sqrt{g / \ell}</script><script type="math/tex; mode=display">\begin{aligned}& \frac{d \omega}{d t}=-\frac{g}{\ell} \theta, \\& \frac{d \theta}{d t}=\omega,\end{aligned}</script><blockquote><p>二阶常微分方程数值求解方式是类似的。</p></blockquote><script type="math/tex; mode=display">\begin{aligned}\omega_{i+1} & =\omega_i-\frac{g}{\ell} \theta_i \Delta t, \\\theta_{i+1} & =\theta_i+\omega_i \Delta t .\end{aligned}</script><p>写出对应的程序</p><p>json文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pendulum1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;length&quot;</span><span class="punctuation">:</span><span class="number">2.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;theta0&quot;</span><span class="punctuation">:</span><span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;omega0&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">g = <span class="number">9.8</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare pendulum class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Simple_Pendulum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, theta0=<span class="number">0</span>, omega0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.length = length</span><br><span class="line">        <span class="variable language_">self</span>.theta = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.omega = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.theta[<span class="number">0</span>] = theta0</span><br><span class="line">        <span class="variable language_">self</span>.omega[<span class="number">0</span>] = omega0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.theta[i + <span class="number">1</span>], <span class="variable language_">self</span>.omega[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.theta[i], <span class="variable language_">self</span>.omega[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, theta, omega, t</span>):</span><br><span class="line">        _theta = theta + omega*dt</span><br><span class="line">        _omega = omega - (g/<span class="variable language_">self</span>.length)*theta*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _theta, _omega, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.theta, <span class="variable language_">self</span>.omega, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_pendulum</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/pendulum.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    pendulum1 = Simple_Pendulum(data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;length&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;theta0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;omega0&quot;</span>])</span><br><span class="line">    pendulum1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    theta, omega, t = pendulum1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, theta, label=<span class="string">r&quot;$\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\theta$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, omega, label=<span class="string">r&quot;$\omega$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\omega$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $\omega$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;pendulum.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_pendulum()</span><br></pre></td></tr></table></figure><p><img src="/img/pendulum.png" alt="pendulum"></p><p>很明显，这样处理会导致结果发散</p><h2 id="结果发散的原因"><a href="#结果发散的原因" class="headerlink" title="结果发散的原因"></a>结果发散的原因</h2><blockquote><p>是体系的能量不守恒</p></blockquote><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2 \omega^2+m g \ell(1-\cos \theta) .</script><p>小 $\theta$ 有近似</p><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2\left(\omega^2+\frac{g}{\ell} \theta^2\right) .</script><p>使用欧拉方法进行转化</p><script type="math/tex; mode=display">E_{i+1}=E_i+\frac{1}{2} m g \ell\left(\omega_i^2+\frac{g}{\ell} \theta_i^2\right)(\Delta t)^2</script><blockquote><p>其实只需要使用 $x<em>{i+1}=x_i+v</em>{i+1}dt$ 代替 $x<em>{i+1}=x_i+v</em>{i}dt$ 就可以一定程度上解决</p></blockquote><h2 id="使用Euler-Cromer方法进行模拟"><a href="#使用Euler-Cromer方法进行模拟" class="headerlink" title="使用Euler-Cromer方法进行模拟"></a>使用Euler-Cromer方法进行模拟</h2><p>对于简谐运动，运动方程的一般形式为</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><blockquote><p>采用 Euler-Cromer 方法求解 x 关于时间的函数，其中 $\alpha=1$ （为了方便，取 k=1 ）。这是简谐运动的一个关键特征。然后将程序扩展到处理 $\alpha=3$ 的情况。这是一个非简谐振子的例子。计算了几个不同振幅（在范围 0.2 到 1 内）下的振动周期，并证明现在运动的周期取决于振幅。</p></blockquote><h3 id="alpha-1-的情况"><a href="#alpha-1-的情况" class="headerlink" title="$\alpha=1$ 的情况"></a>$\alpha=1$ 的情况</h3><p>谐振子的 json 文档为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oscillator&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;oscillator1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator4&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator5&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们要研究这个函数的图像</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><p>先只取 $\alpha=1$ ,并且 $k=1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t = oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>当$\alpha=1$时得到图像1</p><p><img src="/img/excise3-4-1.png" alt="&quot;谐振子图像1&quot;"></p><p>当$\alpha=3$时得到图像2</p><p><img src="/img/excise3-4-2.png" alt="&quot;谐振子图像2&quot;"></p><h3 id="考虑振幅与周期的关系"><a href="#考虑振幅与周期的关系" class="headerlink" title="考虑振幅与周期的关系"></a>考虑振幅与周期的关系</h3><p>接下来我们给simple_oscillator类增加一个calculate_period()函数，用来计算谐振子的周期</p><blockquote><p>calculate_period() 是通过判断$x$是否在初始位置附近来确定周期大小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of oscillators with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance**<span class="number">3</span>*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t,<span class="variable language_">self</span>.period</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_period</span>(<span class="params">self</span>):</span><br><span class="line">        period_list=[]</span><br><span class="line">        period_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="number">5</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &lt;= <span class="number">0.05</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i-<span class="number">1</span>]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &gt;= <span class="number">0.05</span>:</span><br><span class="line">                period_list.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(period_list)):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                period_sum+=period_list[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                period_sum+=period_list[i]-period_list[i-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.period=period_sum*dt/<span class="built_in">len</span>(period_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate_period()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t , period= oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(period)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>模拟得到</p><div class="table-container"><table><thead><tr><th style="text-align:center">振幅</th><th style="text-align:center">周期</th></tr></thead><tbody><tr><td style="text-align:center">0.2</td><td style="text-align:center">35.20</td></tr><tr><td style="text-align:center">0.4</td><td style="text-align:center">18.28</td></tr><tr><td style="text-align:center">0.6</td><td style="text-align:center">12.26</td></tr><tr><td style="text-align:center">0.8</td><td style="text-align:center">9.22</td></tr><tr><td style="text-align:center">1.0</td><td style="text-align:center">7.38</td></tr></tbody></table></div><p>随着振幅增大，周期变小。</p><blockquote><p>一个直观的理解，当$\alpha&gt;1 $ 时，$-kx^\alpha$ 对 $x$ 更敏感，当$x$增大，波动会更强烈</p></blockquote><h3 id="理论解释"><a href="#理论解释" class="headerlink" title="理论解释"></a>理论解释</h3><p>对于前一个练习中 (3.9) 的非简谐振子，可以通过某些特殊函数来解析地获得振动周期关于 $\alpha$ 的一般值的关系。请进行这样的计算，并描述周期与振幅之间的关系如何取决于 $\alpha$ 的值。你能对这个结果给出一个物理解释吗？提示：如果将 (3.9) 的两边都乘以 $\frac{d x}{d t}$，然后对 $t$ 进行积分。这将导致速度和 x 之间的关系。</p><script type="math/tex; mode=display">\frac{dv}{dt}=-kx^\alpha</script><p>变换为</p><script type="math/tex; mode=display">\frac{dv}{dx}\frac{dx}{dt}=-kx^\alpha</script><script type="math/tex; mode=display">vdv=-kx^\alpha dx</script><p>积分得</p><script type="math/tex; mode=display">\frac{1}{2}v^2=-\frac{k}{\alpha+1}x^{\alpha+1}\bigg |_{t=0}^{t=t}</script><p>再利用$v=\frac{dx}{dt}$</p><script type="math/tex; mode=display">\frac{dx}{dt}=\sqrt{\frac{2k}{\alpha+1}(x^{\alpha+1}-x_0^{\alpha+1})}</script><script type="math/tex; mode=display">\frac{dx}{\sqrt{x^{\alpha+1}-x_0^{\alpha+1})}}=\sqrt{\frac{2k}{\alpha+1}}dt</script><p>这个积分无法解析表示，但是可以写成下式</p><script type="math/tex; mode=display">x=F(\sqrt{\frac{2k}{\alpha+1}}t)</script><p>其中$F(x)$是一个周期函数</p><p>那么$\sqrt{\frac{2k}{\alpha+1}}$随$\alpha$增大而减小，故周期增大</p>]]></content>
      
      
      <categories>
          
          <category> 计算物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算物理 </tag>
            
            <tag> 简谐振动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hoomd-blue Two Dimension Particles Simulation</title>
      <link href="/2024/10/20/Hoomd-blue/"/>
      <url>/2024/10/20/Hoomd-blue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://glotzerlab.engin.umich.edu/hoomd-blue/">Hoomd-blue</a>一款分子动力学模拟软件，由University of Michigan开发，开源于<a href="https://github.com/glotzerlab/hoomd-blue">github</a>，学习其详细内容可参考它的<a href="https://hoomd-blue.readthedocs.io/en/v4.8.2/">官方文档</a>和<a href="https://github.com/glotzerlab/hoomd-examples">github实例</a>。</p><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>Ethan在此之前计算机只有python基础课水平，没有独立参加过项目，所以学习了较长时间（断断续续有一个月），才将其基础搞懂，开始复现一篇论文中的结果，这篇论文（<a href="https://arxiv.org/abs/2310.10551">A geometry-originated universal relation for arbitrary convex hard particles</a>）是导师要求学习的，但是没有想到看似简单的文章要学习和复现难度也如此大。frustrating</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>论文主体上围绕一个公式展开</p><script type="math/tex; mode=display">\lim\limits_{\overset{N\to\infty}{N/V=\rho}}\frac{1}{N}\ln(\prod\limits_{i=1}^{N}\frac{P_{N+1}}{P_{i}})=-\frac{\tilde{s}(0+)}{2d}</script><p>我也大概理解公式的意思，不过可能这也足够。左右侧都表征某种密度分布，左侧是用插入粒子来体现，右侧用多少粒子靠拢的程度来表征，公式的详细推导在论文里有。</p><h1 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h1><p>经过对官方文档孜孜不倦的学习，开始尝试写代码，（Hoomd文档没有类似的例子，这代码是真难写啊）。自认为代码非常粗糙，是Ethan在半知半解的调用函数和疯狂骚扰ChatGpt之后弄出来的结果：&gt;</p><h2 id="插入成功几率函数"><a href="#插入成功几率函数" class="headerlink" title="插入成功几率函数"></a>插入成功几率函数</h2><p>为了得到插入成功的概率就需要一个能连续向体系中插入单个粒子的函数，不懈努力后，成功生造了一个在体系中插入粒子的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_triangle</span>(<span class="params">simulation, mc,times=<span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在现有的 HOOMD 模拟中随机插入指定数量的三角形粒子，并检测与已有粒子是否重叠。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    simulation: hoomd.Simulation 对象，表示现有的模拟。</span></span><br><span class="line"><span class="string">    mc: hoomd的hpmc，蒙特卡洛积分器</span></span><br><span class="line"><span class="string">    times：重复插入的次数，次数越大准确度越高</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义三角形的顶点，中心在 (0, 0)</span></span><br><span class="line">    <span class="comment">#a = 1.0  # 边长</span></span><br><span class="line">    <span class="comment">#h = np.sqrt(3) / 2 * a  # 等边三角形的高</span></span><br><span class="line">    <span class="comment">#vertices = [(-a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(0, 2*h/3)]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 HPMC 积分器</span></span><br><span class="line">    <span class="comment">#mc = hoomd.hpmc.integrate.ConvexPolygon()</span></span><br><span class="line">    <span class="comment">#mc.shape[&#x27;A&#x27;] = &#123;&#x27;vertices&#x27;: vertices&#125;</span></span><br><span class="line"></span><br><span class="line">    new_mc = hoomd.hpmc.integrate.ConvexPolygon()</span><br><span class="line">    new_mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将积分器添加到模拟中</span></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模拟盒尺寸</span></span><br><span class="line">    box = simulation.state.box</span><br><span class="line">    Lx = box.Lx</span><br><span class="line">    Ly = box.Ly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取粒子类型的索引</span></span><br><span class="line">    type_id = simulation.state.particle_types.index(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始插入粒子</span></span><br><span class="line">    inserted_recorder=<span class="number">0</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    old_snap = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; times:</span><br><span class="line">        attempts += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 随机生成位置</span></span><br><span class="line">        x = np.random.uniform(-Lx/<span class="number">2</span>, Lx/<span class="number">2</span>)</span><br><span class="line">        y = np.random.uniform(-Ly/<span class="number">2</span>, Ly/<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#print(x,y)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机生成取向（四元数表示）</span></span><br><span class="line">        <span class="comment">#theta = np.random.uniform(0, 2*np.pi)</span></span><br><span class="line">        <span class="comment">#orientation = [np.cos(theta/2), 0, 0, np.sin(theta/2)]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入粒子</span></span><br><span class="line">        <span class="keyword">if</span> old_snap.communicator.rank == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录旧的粒子数量</span></span><br><span class="line">            N_old = old_snap.particles.N</span><br><span class="line">            <span class="comment"># 新的粒子数量</span></span><br><span class="line">            N_new = N_old + <span class="number">1</span></span><br><span class="line">            theta = np.random.uniform(<span class="number">0</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 创建一个新的快照，具有更多的粒子</span></span><br><span class="line">            new_snap = hoomd.Snapshot()</span><br><span class="line">            new_snap.particles.N = N_new</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制盒子尺寸</span></span><br><span class="line">            new_snap.configuration.box = old_snap.configuration.box</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化粒子类型</span></span><br><span class="line">            new_snap.particles.types = old_snap.particles.types</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化属性数组</span></span><br><span class="line">            new_snap.particles.position[:] = np.zeros((N_new, <span class="number">3</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.orientation[:] = np.zeros((N_new, <span class="number">4</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制旧的粒子数据</span></span><br><span class="line">            new_snap.particles.position[:N_old] = old_snap.particles.position[:]</span><br><span class="line">            new_snap.particles.orientation[:N_old] = old_snap.particles.orientation[:]</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 设置新粒子的属性</span></span><br><span class="line">            new_snap.particles.position[N_old] = [x, y, <span class="number">0</span>]</span><br><span class="line">            new_snap.particles.orientation[N_old] = [np.cos(theta/<span class="number">2</span>), <span class="number">0</span>, <span class="number">0</span>, np.sin(theta/<span class="number">2</span>)]</span><br><span class="line">            new_snap.particles.typeid[N_old] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果有其他属性（如 charge、diameter 等），也需要进行同样的处理</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_snap = <span class="literal">None</span>  <span class="comment"># 非主进程设置为 None</span></span><br><span class="line"></span><br><span class="line">        cpu = hoomd.device.CPU()</span><br><span class="line">        new_simulation = hoomd.Simulation(device=cpu,seed=<span class="number">1</span>)</span><br><span class="line">        new_simulation.create_state_from_snapshot(new_snap)</span><br><span class="line">        new_simulation.operations.integrator = new_mc</span><br><span class="line">        <span class="comment">#check_snapshot=simulation.state.get_snapshot()</span></span><br><span class="line">        <span class="comment">#render(check_snapshot)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.typeid)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.position)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查重叠</span></span><br><span class="line">        new_simulation.run(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> new_mc.overlaps &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print(f&quot;检测到重叠，移除粒子 &#123;inserted&#125;&quot;)</span></span><br><span class="line">            <span class="comment">#remove_particle(simulation, simulation.state.N_particles - 1)</span></span><br><span class="line">            <span class="comment">#print(new_mc.overlaps)</span></span><br><span class="line">            <span class="comment">#print(new_mc.shape)</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment">#print(mc.overlaps)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inserted_recorder += <span class="number">1</span></span><br><span class="line">        simulation.state.set_snapshot(old_snap)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inserted_recorder</span><br></pre></td></tr></table></figure><p>需要了解的是，在hoomd中一般有两种储存粒子状态的方式，一种是GSD文件，方便更改，可以从外部轻松访问;另一种是snapshot，多用于在代码环境中储存系统信息，方便调用和删除释放内存。</p><h2 id="SDF函数"><a href="#SDF函数" class="headerlink" title="SDF函数"></a>SDF函数</h2><p>SDF是scale distribution function的简称，中文尺度分布函数，毫无头绪。它是怎么一回事呢，假如体系粒子间的间隔同等乘以一个系数$1-x$（粒子之间的距离是中心与中心的距离）,那么有一定数量的粒子相碰，就可以计正好相碰（只有正好在<script type="math/tex">1-x</script>相碰的粒子才算数）的粒子数为<script type="math/tex">S(x)</script>，好在这个函数是hoomd官方有的函数，不用现成写，只需要调用就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdf_compute = hoomd.hpmc.compute.SDF(xmax=xmax, dx=dx)</span><br><span class="line">sdf_xcompression = sdf_compute.x_compression</span><br><span class="line">sdf_compression = sdf_compute.sdf_compression</span><br></pre></td></tr></table></figure><p>此处SDF有两个重要的量可以通过类访问，x_compression和sdf_compression，它们分别是收缩时每一步的x和该x对应的sdf（x），两者都是numpy的array，所以我们后续很方便的就可以进行绘图</p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>这一部分较简单且在hoomd的文档中花大篇幅和多个例子进行说明了，这里就不赘述原理，只针对本论文要求给出初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_particle</span>(<span class="params">N_particles</span>):</span><br><span class="line">    <span class="comment">#生成一个有N_particles的有序粒子群</span></span><br><span class="line">    spacing = <span class="number">2</span></span><br><span class="line">    K = math.ceil(N_particles ** (<span class="number">1</span> / <span class="number">2</span>))</span><br><span class="line">    L = K * spacing</span><br><span class="line">    x = np.linspace(-L / <span class="number">2</span>, L / <span class="number">2</span>, K, endpoint=<span class="literal">False</span>)</span><br><span class="line">    position_2d = <span class="built_in">list</span>(itertools.product(x, repeat=<span class="number">2</span>))  <span class="comment"># 生成二维网格上的粒子位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取前 N_particles 个位置</span></span><br><span class="line">    positions_2d = np.array(position_2d[<span class="number">0</span>:N_particles])  <span class="comment"># 形状为 (N_particles, 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加第三个坐标（z 坐标），设为零</span></span><br><span class="line">    z_coordinates = np.zeros((N_particles, <span class="number">1</span>))  <span class="comment"># 形状为 (N_particles, 1)</span></span><br><span class="line">    positions_3d = np.hstack((positions_2d, z_coordinates))  <span class="comment"># 合并为 (N_particles, 3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 GSD 帧并设置粒子属性</span></span><br><span class="line">    frame = gsd.hoomd.Frame()</span><br><span class="line">    frame.particles.N = N_particles</span><br><span class="line">    frame.particles.position = positions_3d  <span class="comment"># 现在是 (N_particles, 3) 的数组</span></span><br><span class="line">    frame.particles.typeid = [<span class="number">0</span>] * N_particles</span><br><span class="line">    frame.configuration.box = [L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 注意这里的盒子尺寸</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一个快照</span></span><br><span class="line">    snapshot=hoomd.Snapshot()</span><br><span class="line">    snapshot.particles.N = N_particles</span><br><span class="line">    snapshot.particles.position[:] = positions_3d</span><br><span class="line">    snapshot.particles.typeid[:] = [<span class="number">0</span>] * N_particles</span><br><span class="line">    snapshot.particles.types=[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">    snapshot.configuration.box=[L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> snapshot</span><br></pre></td></tr></table></figure><p>生成一个具有N_particles个粒子的体系，密度恒定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">randomizing_particles</span>(<span class="params">snapshot,times=<span class="number">10e3</span></span>):</span><br><span class="line">    cpu = hoomd.device.CPU()</span><br><span class="line">    simulation = hoomd.Simulation(device=cpu, seed=<span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    mc = hoomd.hpmc.integrate.ConvexPolygon(default_d=<span class="number">0.3</span>,default_a=<span class="number">0.4</span>)</span><br><span class="line">    mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    simulation.create_state_from_snapshot(snapshot)</span><br><span class="line">    initial_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    simulation.run(times)</span><br><span class="line">    final_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_snapshot,mc,simulation</span><br></pre></td></tr></table></figure><p>随机化这个粒子体系，times是MC随机化的步数</p><p>顺便一提，hoomd的官方文档的图像生成函数是基于 <a href="https://fresnel.readthedocs.io/en/v0.13.6/">fresnel</a>的三维图像生成函数。功能很强，但是我要做二维的体系，用不上：&lt; </p><p>我就自己基于<a href="https://matplotlib.org/">matplotlib</a>写了一个二维图像生成函数（目前只支持展现粒子的位置，都是圆形的粒子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">snapshot, dims=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从gsd文件生成一个二维的粒子群图像,目前仅支持圆粒子图.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Extract particle positions and convert to a NumPy array</span></span><br><span class="line">    positions = np.asarray(snapshot.particles.position)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check dimensions (only 2D is supported in this function)</span></span><br><span class="line">    <span class="keyword">if</span> dims != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Only 2D rendering is supported in this function.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot particles</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.scatter(positions[:, <span class="number">0</span>], positions[:, <span class="number">1</span>], s=<span class="number">10</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Particle positions from GSD snapshot&#x27;</span>)</span><br><span class="line">    plt.gca().set_aspect(<span class="string">&#x27;equal&#x27;</span>, adjustable=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h1 id="模拟与调教"><a href="#模拟与调教" class="headerlink" title="模拟与调教"></a>模拟与调教</h1><p>进行中！！</p>]]></content>
      
      
      <categories>
          
          <category> Hoomd-blue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hoomd-blue </tag>
            
            <tag> 分子模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>We Are the World</title>
      <link href="/2024/10/20/we-are-the-world/"/>
      <url>/2024/10/20/we-are-the-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到OldCabbage的博客</p><h1 id="此刻"><a href="#此刻" class="headerlink" title="此刻"></a>此刻</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>我叫Ethan<br>这个博客记录我的思考、对世界的认识。</p><p><img src="https://images.nationalgeographic.org/image/upload/v1652341068/EducationHub/photos/ocean-waves.jpg" alt="图1" title="大海"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
