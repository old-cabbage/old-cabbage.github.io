<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>双摆与三摆的混沌模拟</title>
      <link href="/2025/10/03/%E5%8F%8C%E6%91%86%E4%B8%8E%E4%B8%89%E6%91%86%E7%9A%84%E6%B7%B7%E6%B2%8C%E6%A8%A1%E6%8B%9F/"/>
      <url>/2025/10/03/%E5%8F%8C%E6%91%86%E4%B8%8E%E4%B8%89%E6%91%86%E7%9A%84%E6%B7%B7%E6%B2%8C%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="模拟的完整视频"><a href="#模拟的完整视频" class="headerlink" title="模拟的完整视频"></a>模拟的完整视频</h2><div style="position:relative; width:100%; height:0px; padding-bottom:56.250%"><iframe allow="fullscreen" allowfullscreen height="100%" src="https://streamable.com/e/9x764g?" width="100%" style="border:none; width:100%; height:100%; position:absolute; left:0px; top:0px; overflow:hidden;"></iframe></div><h2 id="Manim"><a href="#Manim" class="headerlink" title="Manim"></a>Manim</h2><p>Manim（Mathematical Animation Engine）是一个开源的动画制作引擎，主要用于制作数学、科学和教育类的视频动画。它是用Python编写的，可以通过编程控制动画的每一个细节，从而创作出非常精确和复杂的数学可视化效果。</p><p>Manim最初是由Grant Sanderson（数学YouTuber 3Blue1Brown的创始人）开发的，用于制作3Blue1Brown视频中的数学动画。Manim提供了强大的工具，可以通过代码来创建几何图形、函数图像、动态转换等。</p><p>Manim 教学网址 <a href="https://docs.manim.community/en/stable/index.html">Manim Community Edition</a></p><p><img src="https://docs.manim.community/en/stable/_images/ManimCELogo-1.png" alt="Manim"></p><h2 id="双摆"><a href="#双摆" class="headerlink" title="双摆"></a>双摆</h2><p>首先构建双摆的数学机制，其动力学方程由两个摆的运动方程组成，可以通过拉格朗日方程推导出。假设摆1的质量为 $m_1$ ,长度为 $L_1$ ,角度为 $\theta_1$ ,摆2的质量为 $m_2$ ,长度为 $L_2$ ,角度为 $\theta_2$ ,重力加速度为 $g$ ,系统的方程可以表示为：</p><script type="math/tex; mode=display">\frac{d^2\theta_1}{dt^2}=\frac{(-m_2g\cos(\theta_2)\sin(\theta_1-\theta_2)+m_2\sin(\theta_1-\theta_2)(L_2\dot{\theta_2}^2+L_1\dot{\theta_1}^2\cos(\theta_1-\theta_2)))}{L_1(m_1+m_2-m_2\cos^2(\theta_1-\theta_2))}</script><script type="math/tex; mode=display">\frac{d^2\theta_2}{dt^2}=\frac{(m_2L_2\dot{\theta_2}^2\sin(\theta_1-\theta_2)-m_2g\cos(\theta_2)\sin(\theta_1-\theta_2)+m_2L_1\dot{\theta_1}^2\cos(\theta_1-\theta_2)\sin(\theta_1-\theta_2))}{L_2(m_1+m_2-m_2\cos^2(\theta_1-\theta_2))}</script><div style="position:relative; width:100%; height:0px; padding-bottom:56.250%"><iframe allow="fullscreen" allowfullscreen height="100%" src="https://streamable.com/e/e0otf1?" width="100%" style="border:none; width:100%; height:100%; position:absolute; left:0px; top:0px; overflow:hidden;"></iframe></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> solve_ivp</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 1. 物理参数和方程求解</span></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 物理常量 ---</span></span><br><span class="line">g = <span class="number">9.8067</span>  <span class="comment"># 重力加速度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 摆的属性 ---</span></span><br><span class="line">L1 = <span class="number">1.6</span>  <span class="comment"># 杆1长度</span></span><br><span class="line">L2 = <span class="number">1.6</span>  <span class="comment"># 杆2长度</span></span><br><span class="line">m1 = <span class="number">1.0</span>  <span class="comment"># 摆球1质量</span></span><br><span class="line">m2 = <span class="number">1.0</span>  <span class="comment"># 摆球2质量</span></span><br><span class="line">t_max = <span class="number">60</span>  <span class="comment"># 模拟总时长 (秒)</span></span><br><span class="line">dt = <span class="number">1</span>/<span class="number">1000</span>   <span class="comment"># 时间步长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 初始条件 ---</span></span><br><span class="line"><span class="comment"># 角度 (弧度) 和角速度 (弧度/秒)</span></span><br><span class="line"><span class="comment"># 角度与竖直向下方向逆时针方向夹角为正角度</span></span><br><span class="line">theta1_0 = PI  + <span class="number">0.01</span></span><br><span class="line">theta2_0 = PI  </span><br><span class="line">omega1_0 = <span class="number">0.0</span></span><br><span class="line">omega2_0 = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rhs_using_linear_system</span>(<span class="params">t, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    右端函数 f(t,y)，实现与参考代码同一套数学逻辑，</span></span><br><span class="line"><span class="string">    但使用状态顺序 [theta1, omega1, theta2, omega2]。</span></span><br><span class="line"><span class="string">    返回 [θ1&#x27;, ω1&#x27;, θ2&#x27;, ω2&#x27;] = [ω1, dω1, ω2, dω2]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    th1, om1, th2, om2 = y</span><br><span class="line">    A = np.zeros((<span class="number">2</span>, <span class="number">2</span>), dtype=np.float64)</span><br><span class="line">    b = np.zeros(<span class="number">2</span>, dtype=np.float64)</span><br><span class="line"></span><br><span class="line">    c12 = np.cos(th1 - th2)</span><br><span class="line">    s12 = np.sin(th1 - th2)</span><br><span class="line"></span><br><span class="line">    A[<span class="number">0</span>, <span class="number">0</span>] = L1 * (m1 + m2)</span><br><span class="line">    A[<span class="number">0</span>, <span class="number">1</span>] = m2 * L2 * c12</span><br><span class="line">    A[<span class="number">1</span>, <span class="number">0</span>] = L2 * c12</span><br><span class="line">    A[<span class="number">1</span>, <span class="number">1</span>] = L1</span><br><span class="line"></span><br><span class="line">    b[<span class="number">0</span>] = (m1 + m2) * g * np.cos(th1) - m2 * L2 * s12 * (om2 ** <span class="number">2</span>)</span><br><span class="line">    b[<span class="number">1</span>] = L1 * s12 * (om1 ** <span class="number">2</span>) + g * np.cos(th2)</span><br><span class="line"></span><br><span class="line">    dom1, dom2 = np.linalg.solve(A, b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装导数，顺序对应 y = [th1, om1, th2, om2]</span></span><br><span class="line">    <span class="keyword">return</span> np.array([om1, dom1, om2, dom2], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rk4_integrate</span>(<span class="params">f, t0, t1, h, y0</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    固定步长四阶RK（与参考实现等价）</span></span><br><span class="line"><span class="string">    返回与原动画兼容的 (t_eval, Y)：</span></span><br><span class="line"><span class="string">      - t_eval: np.arange(t0, t1, h)</span></span><br><span class="line"><span class="string">      - Y.shape = (len(t_eval), len(y0))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 为了和你动画里的索引严格对齐，这里不包含 t1 本身</span></span><br><span class="line">    t_eval = np.arange(t0, t1, h, dtype=np.float64)</span><br><span class="line">    n = t_eval.size</span><br><span class="line">    y = np.zeros((n, <span class="built_in">len</span>(y0)), dtype=np.float64)</span><br><span class="line">    y[<span class="number">0</span>, :] = y0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t_eval[i]</span><br><span class="line">        yi = y[i, :]</span><br><span class="line"></span><br><span class="line">        k1 = f(t, yi)</span><br><span class="line">        k2 = f(t + h/<span class="number">2.0</span>, yi + (h/<span class="number">2.0</span>) * k1)</span><br><span class="line">        k3 = f(t + h/<span class="number">2.0</span>, yi + (h/<span class="number">2.0</span>) * k2)</span><br><span class="line">        k4 = f(t + h,       yi + h * k3)</span><br><span class="line"></span><br><span class="line">        y[i+<span class="number">1</span>, :] = yi + (h/<span class="number">6.0</span>) * (k1 + <span class="number">2.0</span>*(k2 + k3) + k4)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t_eval, y</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 2. Manim 动画设置（将图元与更新逻辑收敛到 Scene 内，避免全局副作用）</span></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublePendulumAnimation</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        t_span = [<span class="number">0.0</span>, t_max]</span><br><span class="line">        t_eval = np.arange(<span class="number">0.0</span>, t_max, dt, dtype=np.float64)</span><br><span class="line">        y0 = np.array([-theta1_0+PI/<span class="number">2</span>, omega1_0, -theta2_0+PI/<span class="number">2</span>, omega2_0], dtype=np.float64)</span><br><span class="line"></span><br><span class="line">        _t, _Y = rk4_integrate(rhs_using_linear_system, t_span[<span class="number">0</span>], t_span[<span class="number">1</span>], dt, y0)</span><br><span class="line">        theta1_sol = _Y[:, <span class="number">0</span>]</span><br><span class="line">        theta2_sol = _Y[:, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        origin = Dot(point=DOWN * <span class="number">0.5</span>)</span><br><span class="line">        title = Tex(<span class="string">&quot;Double Pendulum Simulation&quot;</span>).to_edge(UP)</span><br><span class="line"></span><br><span class="line">        initial_theta1 = theta1_sol[<span class="number">0</span>]</span><br><span class="line">        initial_theta2 = theta2_sol[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        p1_initial_pos = origin.get_center() + np.array([</span><br><span class="line">            L1 * np.cos(initial_theta1),</span><br><span class="line">            -L1 * np.sin(initial_theta1),</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        p2_initial_pos = p1_initial_pos + np.array([</span><br><span class="line">            L2 * np.cos(initial_theta2),</span><br><span class="line">            -L2 * np.sin(initial_theta2),</span><br><span class="line">            <span class="number">0</span></span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 创建摆的组件 (Line 和 Dot) ---</span></span><br><span class="line">        bob1 = Dot(point=p1_initial_pos, color=BLUE)</span><br><span class="line">        bob2 = Dot(point=p2_initial_pos, color=GREEN)</span><br><span class="line">        rod1 = Line(origin.get_center(), bob1.get_center(), stroke_width=<span class="number">3</span>, color=GRAY)</span><br><span class="line">        rod2 = Line(bob1.get_center(), bob2.get_center(), stroke_width=<span class="number">3</span>, color=GRAY)</span><br><span class="line"></span><br><span class="line">        pendulum_group = VGroup(rod1, rod2, bob1, bob2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 追踪路径 ---</span></span><br><span class="line">        trace = TracedPath(bob2.get_center, stroke_width=<span class="number">3</span>, stroke_color=GREEN, stroke_opacity=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 时间驱动器与更新函数 ---</span></span><br><span class="line">        time = ValueTracker(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">update_pendulum</span>(<span class="params">_</span>):</span><br><span class="line">            current_t = time.get_value()</span><br><span class="line">            max_index = <span class="built_in">len</span>(t_eval) - <span class="number">1</span></span><br><span class="line">            index = <span class="built_in">min</span>(<span class="built_in">int</span>(current_t / dt), max_index)</span><br><span class="line"></span><br><span class="line">            theta1 = theta1_sol[index]</span><br><span class="line">            theta2 = theta2_sol[index]</span><br><span class="line"></span><br><span class="line">            p1_x = origin.get_x() + L1 * np.cos(theta1)</span><br><span class="line">            p1_y = origin.get_y() - L1 * np.sin(theta1)</span><br><span class="line">            p2_x = p1_x + L2 * np.cos(theta2)</span><br><span class="line">            p2_y = p1_y - L2 * np.sin(theta2)</span><br><span class="line"></span><br><span class="line">            bob1.move_to([p1_x, p1_y, <span class="number">0</span>])</span><br><span class="line">            bob2.move_to([p2_x, p2_y, <span class="number">0</span>])</span><br><span class="line">            rod1.put_start_and_end_on(origin.get_center(), bob1.get_center())</span><br><span class="line">            rod2.put_start_and_end_on(bob1.get_center(), bob2.get_center())</span><br><span class="line"></span><br><span class="line">        pendulum_group.add_updater(update_pendulum)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 播放动画 ---</span></span><br><span class="line">        <span class="variable language_">self</span>.add(title, origin, trace, pendulum_group)</span><br><span class="line">        <span class="variable language_">self</span>.play(time.animate.set_value(t_max), run_time=t_max, rate_func=linear)</span><br><span class="line">        <span class="variable language_">self</span>.wait()</span><br></pre></td></tr></table></figure><h2 id="三摆"><a href="#三摆" class="headerlink" title="三摆"></a>三摆</h2><p>为处理更多元素的模拟，采用新的思路，用拉格朗日力学的矩阵形式建模三摆（杆无质量、端点为点质量），把动力学写成</p><script type="math/tex; mode=display">M(\boldsymbol{\theta})\ddot{\boldsymbol{\theta}}+\mathbf{C}(\boldsymbol{\theta},\dot{\boldsymbol{\theta}})+\mathbf{G}(\boldsymbol{\theta})=\mathbf{0},\quad\boldsymbol{\theta}=(\theta_1,\theta_2,\theta_3)^\top</script><p>在每个时间步先解线性方程得到 $\ddot{\boldsymbol{\theta}}=M^{-1}[-\mathbf{C}-\mathbf{G}]$ 再用 <strong>固定步长四阶 Runge–Kutta（RK4）</strong> 做时间积分。</p><h3 id="各项是怎样构造的"><a href="#各项是怎样构造的" class="headerlink" title="各项是怎样构造的"></a>各项是怎样构造的</h3><p><strong>质量矩阵 $M(\theta)$</strong>（点质量、无杆质量模型）<br>  对角元 <script type="math/tex">M_{ii}=(\sum_{k=i}^3 m_k)L_i^2</script> 非对角元 <script type="math/tex">M_{ij}=(\sum_{k=\max(i,j)}^3 m_k)L_iL_j\cos(\theta_i-\theta_j)(i\neq j)</script> （见 <code>mass_matrix(theta)</code>）</p><p><strong>重力项 $\mathbf G(\theta)$</strong><br>  取势能 <script type="math/tex">U=\sum_{k=i}^3 m_kg y_k=-\sum_{i=1}^3 (\sum_{k=i}^3 m_k) g L_i\sin\theta_i</script> 因而在代码约定的坐标与号约定下得到 <script type="math/tex">\;G_i=-(\sum_{k=i}^3 m_k) g L_i \cos\theta_i</script> （见 <code>gravity_vector(theta)</code>）</p><p><strong>科氏/离心项 $\mathbf C(\theta,\dot\theta)$</strong><br>  采用<strong>数值 Christoffel</strong> 形式：先对 $M(\theta)$ 做<strong>有限差分</strong>近似 $\partial M/\partial \theta_k$（步长 $\varepsilon=10^{-7}$ ），再按</p><script type="math/tex; mode=display">  C_i=\sum_{j,k}\tfrac12\!\left(\frac{\partial M_{ij}}{\partial\theta_k}+\frac{\partial M_{ik}}{\partial\theta_j}-\frac{\partial M_{jk}}{\partial\theta_i}\right)\dot\theta_j\dot\theta_k</script><p>  组装（见 <code>coriolis_vector(...)</code></p><p><strong>状态方程与求解</strong><br>  以状态 $y=[\theta_1,\omega_1,\theta_2,\omega_2,\theta_3,\omega_3]$，在 <code>triple_rhs</code> 中先算 $M,C,G$，解 $\;M\,\ddot{\boldsymbol\theta}=-(\mathbf C+\mathbf G)$，输出 $[\,\omega_1,\ddot\theta_1,\omega_2,\ddot\theta_2,\omega_3,\ddot\theta_3\,]$。</p><p><strong>时间推进</strong><br>  用的<strong>固定步长 RK4</strong> 积分器 <code>rk4_integrate(...)</code>，步长 <code>dt=1e-3</code>，全程无自适应步长与误差控制。</p><div style="position:relative; width:100%; height:0px; padding-bottom:56.250%"><iframe allow="fullscreen" allowfullscreen height="100%" src="https://streamable.com/e/xud953?" width="100%" style="border:none; width:100%; height:100%; position:absolute; left:0px; top:0px; overflow:hidden;"></iframe></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> manim <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 1. 三摆动力学与数值积分（仿 double_pendulum_2.py 结构）</span></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 物理常量与参数 ---</span></span><br><span class="line">g = <span class="number">9.8067</span></span><br><span class="line"></span><br><span class="line">L1 = <span class="number">1.0</span></span><br><span class="line">L2 = <span class="number">1.0</span></span><br><span class="line">L3 = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">m1 = <span class="number">1.0</span></span><br><span class="line">m2 = <span class="number">1.0</span></span><br><span class="line">m3 = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">t_max = <span class="number">60.0</span></span><br><span class="line">dt = <span class="number">1.0</span> / <span class="number">1000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 初始条件 ---</span></span><br><span class="line"><span class="comment"># 角度 (弧度) 和角速度 (弧度/秒)</span></span><br><span class="line"><span class="comment"># 角度与竖直向下方向逆时针方向夹角为正角度</span></span><br><span class="line">theta1_0 = PI </span><br><span class="line">theta2_0 = PI</span><br><span class="line">theta3_0 = PI + <span class="number">0.01</span></span><br><span class="line">omega1_0 = <span class="number">0.0</span></span><br><span class="line">omega2_0 = <span class="number">0.0</span></span><br><span class="line">omega3_0 = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 质量矩阵 M(θ)，点质量、无杆质量模型</span></span><br><span class="line"><span class="comment"># M_ij = sum_&#123;k=max(i,j)&#125;^3 m_k * l_i * l_j * cos(θ_i - θ_j), i ≠ j</span></span><br><span class="line"><span class="comment"># M_ii = sum_&#123;k=i&#125;^3 m_k * l_i^2</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mass_matrix</span>(<span class="params">theta</span>):</span><br><span class="line">    th1, th2, th3 = <span class="built_in">float</span>(theta[<span class="number">0</span>]), <span class="built_in">float</span>(theta[<span class="number">1</span>]), <span class="built_in">float</span>(theta[<span class="number">2</span>])</span><br><span class="line">    l = [L1, L2, L3]</span><br><span class="line">    m = [m1, m2, m3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tail_mass</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(m[i:])</span><br><span class="line"></span><br><span class="line">    M = np.zeros((<span class="number">3</span>, <span class="number">3</span>), dtype=np.float64)</span><br><span class="line">    <span class="comment"># Diagonal terms</span></span><br><span class="line">    M[<span class="number">0</span>, <span class="number">0</span>] = tail_mass(<span class="number">0</span>) * (l[<span class="number">0</span>] ** <span class="number">2</span>)</span><br><span class="line">    M[<span class="number">1</span>, <span class="number">1</span>] = tail_mass(<span class="number">1</span>) * (l[<span class="number">1</span>] ** <span class="number">2</span>)</span><br><span class="line">    M[<span class="number">2</span>, <span class="number">2</span>] = tail_mass(<span class="number">2</span>) * (l[<span class="number">2</span>] ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Off-diagonal terms</span></span><br><span class="line">    th = [th1, th2, th3]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">            cij = <span class="built_in">sum</span>(m[j:]) * l[i] * l[j] * np.cos(th[i] - th[j])</span><br><span class="line">            M[i, j] = cij</span><br><span class="line">            M[j, i] = cij</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 重力项 G(θ)</span></span><br><span class="line"><span class="comment"># G_i = (sum_&#123;k=i&#125;^3 m_k) * g * l_i * sin(θ_i)</span></span><br><span class="line"><span class="comment"># 坐标系与动画一致：x=Σ l_i cosθ_i, y=-Σ l_i sinθ_i</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gravity_vector</span>(<span class="params">theta</span>):</span><br><span class="line">    th1, th2, th3 = <span class="built_in">float</span>(theta[<span class="number">0</span>]), <span class="built_in">float</span>(theta[<span class="number">1</span>]), <span class="built_in">float</span>(theta[<span class="number">2</span>])</span><br><span class="line">    l = [L1, L2, L3]</span><br><span class="line">    m = [m1, m2, m3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tail_mass</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(m[i:])</span><br><span class="line"></span><br><span class="line">    G = np.zeros(<span class="number">3</span>, dtype=np.float64)</span><br><span class="line">    <span class="comment"># 向下的重力：U = \sum m g y = -\sum m g l sin(θ)，故 G_i = ∂U/∂θ_i = -\sum m g l cos(θ_i)</span></span><br><span class="line">    G[<span class="number">0</span>] = -tail_mass(<span class="number">0</span>) * g * l[<span class="number">0</span>] * np.cos(th1)</span><br><span class="line">    G[<span class="number">1</span>] = -tail_mass(<span class="number">1</span>) * g * l[<span class="number">1</span>] * np.cos(th2)</span><br><span class="line">    G[<span class="number">2</span>] = -tail_mass(<span class="number">2</span>) * g * l[<span class="number">2</span>] * np.cos(th3)</span><br><span class="line">    <span class="keyword">return</span> G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 科氏/离心项 C(θ, θdot)θdot = Γ(θ, θdot)</span></span><br><span class="line"><span class="comment"># 使用数值 Christoffel 形式：</span></span><br><span class="line"><span class="comment">#   C_i = Σ_j Σ_k 0.5*(∂M_ij/∂θ_k + ∂M_ik/∂θ_j - ∂M_jk/∂θ_i) θ̇_j θ̇_k</span></span><br><span class="line"><span class="comment"># 通过数值微分 dM/dθ 计算</span></span><br><span class="line"><span class="comment"># -------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coriolis_vector</span>(<span class="params">theta, theta_dot, eps=<span class="number">1e-7</span></span>):</span><br><span class="line">    th = np.asarray(theta, dtype=np.float64)</span><br><span class="line">    dth = np.asarray(theta_dot, dtype=np.float64)</span><br><span class="line"></span><br><span class="line">    M0 = mass_matrix(th)</span><br><span class="line">    dM = [<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        th_perturb = th.copy()</span><br><span class="line">        th_perturb[k] += eps</span><br><span class="line">        Mk = mass_matrix(th_perturb)</span><br><span class="line">        dM[k] = (Mk - M0) / eps</span><br><span class="line"></span><br><span class="line">    C = np.zeros(<span class="number">3</span>, dtype=np.float64)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        s = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                term = <span class="number">0.5</span> * (dM[k][i, j] + dM[j][i, k] - dM[i][j, k])</span><br><span class="line">                s += term * dth[j] * dth[k]</span><br><span class="line">        C[i] = s</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右端函数：y = [θ1, ω1, θ2, ω2, θ3, ω3] -&gt; y&#x27; = [ω1, α1, ω2, α2, ω3, α3]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">triple_rhs</span>(<span class="params">t, y</span>):</span><br><span class="line">    th1, om1, th2, om2, th3, om3 = y</span><br><span class="line">    theta = np.array([th1, th2, th3], dtype=np.float64)</span><br><span class="line">    theta_dot = np.array([om1, om2, om3], dtype=np.float64)</span><br><span class="line"></span><br><span class="line">    M = mass_matrix(theta)</span><br><span class="line">    C = coriolis_vector(theta, theta_dot)</span><br><span class="line">    Gv = gravity_vector(theta)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># M * theta_ddot + C + G = 0</span></span><br><span class="line">    rhs = -(C + Gv)</span><br><span class="line">    theta_ddot = np.linalg.solve(M, rhs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.array([om1, theta_ddot[<span class="number">0</span>], om2, theta_ddot[<span class="number">1</span>], om3, theta_ddot[<span class="number">2</span>]], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定步长 RK4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rk4_integrate</span>(<span class="params">f, t0, t1, h, y0</span>):</span><br><span class="line">    t_eval = np.arange(t0, t1, h, dtype=np.float64)</span><br><span class="line">    n = t_eval.size</span><br><span class="line">    y = np.zeros((n, <span class="built_in">len</span>(y0)), dtype=np.float64)</span><br><span class="line">    y[<span class="number">0</span>, :] = y0</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        t = t_eval[i]</span><br><span class="line">        yi = y[i, :]</span><br><span class="line">        k1 = f(t, yi)</span><br><span class="line">        k2 = f(t + h / <span class="number">2.0</span>, yi + (h / <span class="number">2.0</span>) * k1)</span><br><span class="line">        k3 = f(t + h / <span class="number">2.0</span>, yi + (h / <span class="number">2.0</span>) * k2)</span><br><span class="line">        k4 = f(t + h, yi + h * k3)</span><br><span class="line">        y[i + <span class="number">1</span>, :] = yi + (h / <span class="number">6.0</span>) * (k1 + <span class="number">2.0</span> * (k2 + k3) + k4)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> t_eval, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># 2. Manim 动画</span></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TriplePendulumAnimation</span>(<span class="title class_ inherited__">Scene</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self</span>):</span><br><span class="line">        t_span = [<span class="number">0.0</span>, t_max]</span><br><span class="line">        t_eval = np.arange(<span class="number">0.0</span>, t_max, dt, dtype=np.float64)</span><br><span class="line">        y0 = np.array([-theta1_0+PI/<span class="number">2</span>, omega1_0, -theta2_0+PI/<span class="number">2</span>, omega2_0, -theta3_0+PI/<span class="number">2</span>, omega3_0], dtype=np.float64)</span><br><span class="line"></span><br><span class="line">        _t, _Y = rk4_integrate(triple_rhs, t_span[<span class="number">0</span>], t_span[<span class="number">1</span>], dt, y0)</span><br><span class="line">        theta1_sol = _Y[:, <span class="number">0</span>]</span><br><span class="line">        theta2_sol = _Y[:, <span class="number">2</span>]</span><br><span class="line">        theta3_sol = _Y[:, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># --- 基础对象 ---</span></span><br><span class="line">        origin = Dot(point=DOWN * <span class="number">0.5</span>)</span><br><span class="line">        title = Tex(<span class="string">&quot;Triple Pendulum Simulation&quot;</span>).to_edge(UP)</span><br><span class="line"></span><br><span class="line">        th1_0 = theta1_sol[<span class="number">0</span>]</span><br><span class="line">        th2_0 = theta2_sol[<span class="number">0</span>]</span><br><span class="line">        th3_0 = theta3_sol[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        p1_initial = origin.get_center() + np.array([</span><br><span class="line">            L1 * np.cos(th1_0),</span><br><span class="line">            -L1 * np.sin(th1_0),</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ])</span><br><span class="line">        p2_initial = p1_initial + np.array([</span><br><span class="line">            L2 * np.cos(th2_0),</span><br><span class="line">            -L2 * np.sin(th2_0),</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ])</span><br><span class="line">        p3_initial = p2_initial + np.array([</span><br><span class="line">            L3 * np.cos(th3_0),</span><br><span class="line">            -L3 * np.sin(th3_0),</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        bob1 = Dot(point=p1_initial, color=BLUE)</span><br><span class="line">        bob2 = Dot(point=p2_initial, color=GREEN)</span><br><span class="line">        bob3 = Dot(point=p3_initial, color=RED)</span><br><span class="line"></span><br><span class="line">        rod1 = Line(origin.get_center(), bob1.get_center(), stroke_width=<span class="number">3</span>, color=GRAY)</span><br><span class="line">        rod2 = Line(bob1.get_center(), bob2.get_center(), stroke_width=<span class="number">3</span>, color=GRAY)</span><br><span class="line">        rod3 = Line(bob2.get_center(), bob3.get_center(), stroke_width=<span class="number">3</span>, color=GRAY)</span><br><span class="line"></span><br><span class="line">        group = VGroup(rod1, rod2, rod3, bob1, bob2, bob3)</span><br><span class="line"></span><br><span class="line">        trace = TracedPath(bob3.get_center, stroke_width=<span class="number">3</span>, stroke_color=RED, stroke_opacity=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">        time = ValueTracker(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">update_system</span>(<span class="params">_</span>):</span><br><span class="line">            current_t = time.get_value()</span><br><span class="line">            max_index = <span class="built_in">len</span>(t_eval) - <span class="number">1</span></span><br><span class="line">            index = <span class="built_in">min</span>(<span class="built_in">int</span>(current_t / dt), max_index)</span><br><span class="line"></span><br><span class="line">            th1 = theta1_sol[index]</span><br><span class="line">            th2 = theta2_sol[index]</span><br><span class="line">            th3 = theta3_sol[index]</span><br><span class="line"></span><br><span class="line">            p1_x = origin.get_x() + L1 * np.cos(th1)</span><br><span class="line">            p1_y = origin.get_y() - L1 * np.sin(th1)</span><br><span class="line">            p2_x = p1_x + L2 * np.cos(th2)</span><br><span class="line">            p2_y = p1_y - L2 * np.sin(th2)</span><br><span class="line">            p3_x = p2_x + L3 * np.cos(th3)</span><br><span class="line">            p3_y = p2_y - L3 * np.sin(th3)</span><br><span class="line"></span><br><span class="line">            bob1.move_to([p1_x, p1_y, <span class="number">0</span>])</span><br><span class="line">            bob2.move_to([p2_x, p2_y, <span class="number">0</span>])</span><br><span class="line">            bob3.move_to([p3_x, p3_y, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            rod1.put_start_and_end_on(origin.get_center(), bob1.get_center())</span><br><span class="line">            rod2.put_start_and_end_on(bob1.get_center(), bob2.get_center())</span><br><span class="line">            rod3.put_start_and_end_on(bob2.get_center(), bob3.get_center())</span><br><span class="line"></span><br><span class="line">        group.add_updater(update_system)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.add(title, origin, trace, group)</span><br><span class="line">        <span class="variable language_">self</span>.play(time.animate.set_value(t_max), run_time=t_max, rate_func=linear)</span><br><span class="line">        <span class="variable language_">self</span>.wait()</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>若要推广到更多维度的摆，采用三摆的方案即可</p>]]></content>
      
      
      <categories>
          
          <category> 计算物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算物理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现与展望——源自几何对凸粒子普适的公式</title>
      <link href="/2025/05/20/%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%B1%95%E6%9C%9B%E2%80%94%E2%80%94%E6%BA%90%E8%87%AA%E5%87%A0%E4%BD%95%E5%AF%B9%E5%87%B8%E7%B2%92%E5%AD%90%E6%99%AE%E9%80%82%E7%9A%84%E5%85%AC%E5%BC%8F/"/>
      <url>/2025/05/20/%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%B1%95%E6%9C%9B%E2%80%94%E2%80%94%E6%BA%90%E8%87%AA%E5%87%A0%E4%BD%95%E5%AF%B9%E5%87%B8%E7%B2%92%E5%AD%90%E6%99%AE%E9%80%82%E7%9A%84%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复现与展望——源自几何对凸粒子普适的公式"><a href="#复现与展望——源自几何对凸粒子普适的公式" class="headerlink" title="复现与展望——源自几何对凸粒子普适的公式"></a>复现与展望——源自几何对凸粒子普适的公式</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>我们讨论的硬凸粒子系统，其相互作用势是一种排斥性的$\delta$势，具有一定的“纯粹性”。原论文将注意力放在一个源自几何关系的对所有凸粒子皆成立的恒等式上，采用python的软件包HOOMD-bule完成对问题的模拟，我也跟随相同的路线进行工作。在复现完成后，我将视线放到凹粒子的群上，它们的研究方法相似，不过凹粒子的属性更加多样，许多常见的物品实际上是凹的，如字母H，五角星等等。</p><p>我们回到关键的恒等式上来</p><script type="math/tex; mode=display">\lim_{\substack{N \to \infty \\ N/V =\rho}} \, \frac{1}{N} \ln (\prod_{i=1}^{N} \frac{P_{N+1}}{P_{i}} ) = -\frac{\tilde{s}(0+) }{2d}.</script><p>指定分子数密度N，调整密度为$N/V=\rho$ ，此时固定V，可以开始研究从1到N的粒子数在这样的V下随机组合的粒子群，我们在某些数目的粒子群中执行插入一个粒子的操作从而得到插入粒子的概率$P_i$，即为在$i-1$个粒子的群中插入一个粒子的成功率。</p><p>等式右侧的$\tilde{s}(x)$为尺寸分布函数，在原论文中有详细介绍。$\mathrm{d}$则是空间的维度。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>在conda环境下进行HOOMD-blue包的安装，具体参见<a href="https://hoomd-blue.readthedocs.io/en/v5.1.1/installation.html">HOOMD-blue的安装教程</a>。需要注意的是HOOMd-blue需要Linux环境，并且在利用<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">WSL</a>实现的虚拟机无法调用GPU进行运算，代码开源于<a href="https://github.com/glotzerlab/hoomd-blue">github</a>,可以通过终端命令下载源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/glotzerlab/hoomd-blue.git</span><br></pre></td></tr></table></figure><h2 id="代码构建"><a href="#代码构建" class="headerlink" title="代码构建"></a>代码构建</h2><h3 id="主体架构"><a href="#主体架构" class="headerlink" title="主体架构"></a>主体架构</h3><p>完成论文的代码开源于<a href="https://github.com/old-cabbage/Particle-Move-with-HOOMD-blue">https://github.com/old-cabbage/Particle-Move-with-HOOMD-blue</a>，架构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Particle/</span><br><span class="line">├─concave    </span><br><span class="line">├─convex  </span><br><span class="line">├─mixture  </span><br><span class="line">└─result</span><br><span class="line">    ├─concave</span><br><span class="line">    ├─convex</span><br><span class="line">    └─sdf</span><br><span class="line">        ├─concave     </span><br><span class="line">        ├─convex      </span><br><span class="line">        └─mixture</span><br></pre></td></tr></table></figure><p>system.py文件将粒子群本身作为一个类，将论文所需要的操作变为类本身的函数，可以大大简化调整关键参数的修改过程。主要需要修改的文件是 particle-move. py，通过调整相应的粒子种类，实验需要模拟的次数来实现。这里我们的粒子群实际是以.gsd文件保存的，由于需要生成大量的.gsd文件，故采用generate.py文件独立地生成粒子群，可以减少主程序的负担。result文件夹存放着蒙特卡洛模拟的结果，concave、convex文件夹中都有进行数据分析所需要的文件，可以快捷进行数据的可视化。</p><h3 id="关键方法"><a href="#关键方法" class="headerlink" title="关键方法"></a>关键方法</h3><h4 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h4><p>实现项目的计算量较大，一般需要在高算力服务器上进行，且很多工作是可以并行而不影响结果的，故文件都进行了适当的MPI并行处理，</p><p>在System类中，采用了两种方法生成粒子群，一种是直接让粒子在既定密度下有序排列，再执行打乱操作，增大粒子群的熵，适合密度不大和凸粒子的情况；另一种则是利用hoomd.hpmc.update中的QuickCompress类，添加其到Simulation.operations.updaters方法中，通过指定压缩方式和速度，可以实现逐步的将密度较小的体系压缩成高密度体系，并且体系的熵自然的增高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#压缩体系</span></span><br><span class="line">initial_box = <span class="variable language_">self</span>.simulation.state.box</span><br><span class="line">final_box = hoomd.Box.from_box(initial_box)</span><br><span class="line">final_box.volume = <span class="variable language_">self</span>.simulation.state.N_particles * <span class="variable language_">self</span>.particle_area / <span class="variable language_">self</span>.packing_density</span><br><span class="line">compress = hoomd.hpmc.update.QuickCompress(</span><br><span class="line">    trigger=hoomd.trigger.Periodic(<span class="number">10</span>), target_box=final_box</span><br><span class="line">)</span><br><span class="line"><span class="variable language_">self</span>.simulation.operations.updaters.append(compress)</span><br><span class="line">periodic = hoomd.trigger.Periodic(<span class="number">10</span>)</span><br><span class="line">tune = hoomd.hpmc.tune.MoveSize.scale_solver(</span><br><span class="line">    moves=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>],</span><br><span class="line">    target=<span class="number">0.2</span>,</span><br><span class="line">    trigger=periodic,</span><br><span class="line">    max_translation_move=<span class="number">5</span>,</span><br><span class="line">    max_rotation_move=<span class="number">5</span>,</span><br><span class="line">)</span><br><span class="line"><span class="variable language_">self</span>.simulation.operations.tuners.append(tune)</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><p>HOOMD-blue的hpmc中提供了FreeVolume方法计算体系的剩余体积，它是通过不断投入粒子实现的，故通过简单改变投入粒子的类型再对结果做一些处理即可得到需要的成功率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">random_insert</span>(<span class="params">self,insert_times</span>):</span><br><span class="line"><span class="variable language_">self</span>.fv=hoomd.hpmc.compute.FreeVolume(test_particle_type=<span class="variable language_">self</span>.shape, </span><br><span class="line">num_samples=insert_times)</span><br><span class="line"><span class="variable language_">self</span>.simulation.operations.computes.append(<span class="variable language_">self</span>.fv)</span><br><span class="line"><span class="variable language_">self</span>.success_insert = <span class="built_in">round</span>(<span class="variable language_">self</span>.fv.free_volume * </span><br><span class="line">insert_times / <span class="variable language_">self</span>.simulation.state.box.volume)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">self</span>.success_insert</span><br></pre></td></tr></table></figure><p>在主程序中通过循环实现插入并更新体系的蒙特卡洛操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">iterations = <span class="number">1000</span>              <span class="comment"># 循环次数</span></span><br><span class="line">moves_per_cycle = <span class="number">5</span>            <span class="comment"># 每个循环中移动的步数</span></span><br><span class="line">insertions_per_cycle = <span class="number">100000</span>    <span class="comment"># 每个循环中插入的粒子尝试次数</span></span><br><span class="line"></span><br><span class="line">total_success = <span class="number">0</span></span><br><span class="line">total_attempts = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n开始进行循环模拟和插入测试...&quot;</span>)</span><br><span class="line">simulation_start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> cycle <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, iterations + <span class="number">1</span>):</span><br><span class="line">    <span class="comment"># 进行移动</span></span><br><span class="line">    system.simulation.run(moves_per_cycle)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行插入尝试  </span></span><br><span class="line">    success = system.random_insert(</span><br><span class="line">        insert_times=insertions_per_cycle</span><br><span class="line">    )</span><br><span class="line">    total_success += success</span><br><span class="line">    total_attempts += insertions_per_cycle</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可选：打印每个循环的结果</span></span><br><span class="line">    <span class="keyword">if</span> cycle % (iterations // <span class="number">10</span> ) == <span class="number">0</span>:</span><br><span class="line">        simulation_interval_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;循环 <span class="subst">&#123;cycle&#125;</span>/<span class="subst">&#123;iterations&#125;</span>: 成功插入 <span class="subst">&#123;success&#125;</span>/<span class="subst">&#123;insertions_per_cycle&#125;</span> 个粒子;</span></span><br><span class="line"><span class="string">        耗时: <span class="subst">&#123;simulation_interval_time - simulation_start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"></span><br><span class="line">simulation_end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n堆叠密度为<span class="subst">&#123;packing_density_0&#125;</span>，粒子数为<span class="subst">&#123;num_particles&#125;</span>的循环模拟和插入测试完成，</span></span><br><span class="line"><span class="string">耗时: <span class="subst">&#123;simulation_end_time - simulation_start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line"><span class="comment"># 计算最终的成功插入概率</span></span><br><span class="line">final_probability = total_success / total_attempts <span class="keyword">if</span> total_attempts &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最终插入成功概率: <span class="subst">&#123;final_probability * <span class="number">100</span>:<span class="number">.5</span>f&#125;</span>% (<span class="subst">&#123;total_success&#125;</span>/<span class="subst">&#123;total_attempts&#125;</span>) ;</span></span><br><span class="line"><span class="string">ln(Pi)=<span class="subst">&#123;math.log(final_probability)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="SDF计算"><a href="#SDF计算" class="headerlink" title="SDF计算"></a>SDF计算</h4><p>SDF的计算调用了HOOMD-blue的SDF函数，可以获得曲线，也可以直接SDF.P来直接计算SDF的截距，在system文件中通过以下操作实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_sdf</span>(<span class="params">self,sdf_mc,sdf_xmax,sdf_dx,sdf_each_run</span>):</span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_sdfcompression=np.zeros(<span class="built_in">int</span>(sdf_xmax/sdf_dx))</span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_sdfexpansion=np.zeros(<span class="built_in">int</span>(sdf_xmax/sdf_dx))</span><br><span class="line">    <span class="variable language_">self</span>.sdf_compute = hoomd.hpmc.compute.SDF(xmax=sdf_xmax, dx=sdf_dx)</span><br><span class="line">    <span class="variable language_">self</span>.simulation.operations.computes.append(<span class="variable language_">self</span>.sdf_compute)</span><br><span class="line">    <span class="comment">#sdf_start_time=time.time()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sdf循环开始&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sdf_mc):</span><br><span class="line">        <span class="variable language_">self</span>.simulation.run(sdf_each_run)</span><br><span class="line">        <span class="variable language_">self</span>.total_sdf_sdfcompression += <span class="variable language_">self</span>.sdf_compute.sdf_compression</span><br><span class="line">        <span class="variable language_">self</span>.total_sdf_sdfexpansion += <span class="variable language_">self</span>.sdf_compute.sdf_expansion</span><br><span class="line">        <span class="comment">#if (i+1)%(sdf_mc//10)==0:</span></span><br><span class="line">        <span class="comment">#    sdf_interval_time=time.time()</span></span><br><span class="line">        <span class="comment">#    print(f&quot;循环已经进行了&#123;i+1&#125;次,耗时&#123;sdf_interval_time-sdf_start_time:.2f&#125;秒&quot;)</span></span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_xcompression = <span class="variable language_">self</span>.sdf_compute.x_compression</span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_xexpansion = <span class="variable language_">self</span>.sdf_compute.x_expansion</span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_sdfcompression /= sdf_mc</span><br><span class="line">    <span class="variable language_">self</span>.total_sdf_sdfexpansion /= sdf_mc</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.total_sdf_xcompression,<span class="variable language_">self</span>.total_sdf_xexpansion,<span class="variable language_">self</span>.total_sdf_sdfcompression,<span class="variable language_">self</span>.total_sdf_sdfexpansion</span><br></pre></td></tr></table></figure><h2 id="凸粒子的实验结果"><a href="#凸粒子的实验结果" class="headerlink" title="凸粒子的实验结果"></a>凸粒子的实验结果</h2><h3 id="插入概率"><a href="#插入概率" class="headerlink" title="插入概率"></a>插入概率</h3><p>与原论文相同，采用N=5000个粒子，每个数据点经过$10^9$以上次插入，得到$\mathrm{ln}(P_i)$随着粒子数增加的图线，当体系的密度过大时，$P_i$ 以极快的速度减小，在高密度体系中插入粒子十分困难，概率难以计算。</p><p><img src="https://ooo.0x0.ooo/2025/05/20/OdpY0p.png" alt=""></p><p><img src="https://ooo.0x0.ooo/2025/05/20/Odp2Xq.png" alt="四次曲线拟合密度为0.5体系"></p><p>特别的，用四次曲线拟合$\mathrm{ln}(P_i)$可以获取曲线的部分性质，这里密度为0.5的曲线的四次拟合与论文中的数据相符合。</p><script type="math/tex; mode=display">    \mathrm{ln}(P_i)=-1.712\times10^{-15} i^4 - 1.697\times 10^{-11} i^3 - 7.424\times 10^{-8} i^2 - 5.721\times 10^{-3} i</script><h3 id="SDF"><a href="#SDF" class="headerlink" title="SDF"></a>SDF</h3><p>SDF计算结果的关键的横坐标与原论文相符合，这里亦选取密度为0.5的体系来分析，左图为随机选取了$10^4$个体系的SDF结果可视化的散点图，右图为根据原数据（$10^{9}$次SDF数值）而拟合出的正态曲线，与预期的标准正态曲线十分接近。</p><p><img src="https://ooo.0x0.ooo/2025/05/20/Odp91Y.png" alt="SDF数据的分析"></p><h2 id="凹粒子的展望"><a href="#凹粒子的展望" class="headerlink" title="凹粒子的展望"></a>凹粒子的展望</h2><p>凹粒子由于粒子形状复杂，并且库的优化弱于凸粒子，故计算难度远大于凸粒子，由于凹粒子的形态复杂，要研究凹粒子的问题势必要分析多种凹粒子的性质。一个与凸粒子不同地方是凹粒子的SDF不只有膨胀的SDF，还有压缩的SDF，在我们研究的恒等式上要加上一项。</p><script type="math/tex; mode=display">\lim_{\substack{N \to \infty \\ N/V =\rho}} \, \frac{1}{N} \ln (\prod_{i=1}^{N} \frac{P_{N+1}}{P_{i}} ) = -\frac{\tilde{s}(0+) + \tilde{s}(0-)}{2d}.</script><p>可是，这一项并不一定在所有凹粒子上都显现，对于H粒子，由于它非常的“凹”，可以观测到$\tilde{s}(0-)$项；但是对于V字粒子，它不是很“凹”，额外的这一项完全无法对压缩造成影响</p><p><img src="https://ooo.0x0.ooo/2025/05/20/OdpjHv.png" alt="H字母形状的粒子"><br><img src="https://ooo.0x0.ooo/2025/05/20/Odp8xc.png" alt="方形一侧以V字凹入的粒子"></p><p>对V字粒子的结果，我们进行了较为精确的计算，结果与公式符合的很好；对于H粒子，我们进行了定性的计算，发现密度较大时插入概率十分小，SDF的膨胀项对结果产生了显著的影响。由于计算能力受限，对个别密度的验证符合公式</p><p><img src="https://ooo.0x0.ooo/2025/05/20/OdpVKj.png" alt="V字凹粒子插入概率"><br><img src="https://ooo.0x0.ooo/2025/05/20/OdplMU.png" alt="密度为0.5的SDF曲线"></p><p>这项研究揭示了硬粒子系统中几何学和热力学之间复杂的相互作用。从熵、压强和化学势之间联系的基本热力学关系中出发，走到一个意料之外的地方，建立了一种对各种粒子成立的等式。</p>]]></content>
      
      
      <categories>
          
          <category> 热力学与统计力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 热力学与统计力学 </tag>
            
            <tag> HOOMD-blue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算物理之简谐振动</title>
      <link href="/2024/10/24/comphy-oscillator/"/>
      <url>/2024/10/24/comphy-oscillator/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="讨论误差的影响"><a href="#讨论误差的影响" class="headerlink" title="讨论误差的影响"></a>讨论误差的影响</h2><p>考虑一个单摆我们可以先解析的求解</p><script type="math/tex; mode=display">F_\theta=-m g \sin \theta,</script><script type="math/tex; mode=display">F_\theta=m d^2s/dt^2</script><script type="math/tex; mode=display">\sin \theta \approx \theta</script><script type="math/tex; mode=display">\frac{d^2 \theta}{d t^2}=-\frac{g}{\ell} \theta</script><p>解析解</p><script type="math/tex; mode=display">\theta=\theta_0 \sin (\Omega t+\phi)</script><p>  这里 $\omega$ 是角速度</p><script type="math/tex; mode=display">\Omega=\sqrt{g / \ell}</script><script type="math/tex; mode=display">\begin{aligned}& \frac{d \omega}{d t}=-\frac{g}{\ell} \theta, \\& \frac{d \theta}{d t}=\omega,\end{aligned}</script><blockquote><p>二阶常微分方程数值求解方式是类似的。</p></blockquote><script type="math/tex; mode=display">\begin{aligned}\omega_{i+1} & =\omega_i-\frac{g}{\ell} \theta_i \Delta t, \\\theta_{i+1} & =\theta_i+\omega_i \Delta t .\end{aligned}</script><p>写出对应的程序</p><p>json文档</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pendulum1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;length&quot;</span><span class="punctuation">:</span><span class="number">2.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;theta0&quot;</span><span class="punctuation">:</span><span class="number">3.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;omega0&quot;</span><span class="punctuation">:</span> <span class="number">0.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">g = <span class="number">9.8</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare pendulum class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Simple_Pendulum</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, length, theta0=<span class="number">0</span>, omega0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.length = length</span><br><span class="line">        <span class="variable language_">self</span>.theta = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.omega = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.theta[<span class="number">0</span>] = theta0</span><br><span class="line">        <span class="variable language_">self</span>.omega[<span class="number">0</span>] = omega0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.theta[i + <span class="number">1</span>], <span class="variable language_">self</span>.omega[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.theta[i], <span class="variable language_">self</span>.omega[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, theta, omega, t</span>):</span><br><span class="line">        _theta = theta + omega*dt</span><br><span class="line">        _omega = omega - (g/<span class="variable language_">self</span>.length)*theta*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _theta, _omega, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.theta, <span class="variable language_">self</span>.omega, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_pendulum</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/pendulum.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    pendulum1 = Simple_Pendulum(data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;length&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;theta0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;pendulum1&quot;</span>][<span class="string">&quot;omega0&quot;</span>])</span><br><span class="line">    pendulum1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    theta, omega, t = pendulum1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, theta, label=<span class="string">r&quot;$\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\theta$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $\theta$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, omega, label=<span class="string">r&quot;$\omega$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$\omega$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $\omega$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;pendulum.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_pendulum()</span><br></pre></td></tr></table></figure><p><img src="/img/pendulum.png" alt="pendulum"></p><p>很明显，这样处理会导致结果发散</p><h2 id="结果发散的原因"><a href="#结果发散的原因" class="headerlink" title="结果发散的原因"></a>结果发散的原因</h2><blockquote><p>是体系的能量不守恒</p></blockquote><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2 \omega^2+m g \ell(1-\cos \theta) .</script><p>小 $\theta$ 有近似</p><script type="math/tex; mode=display">E=\frac{1}{2} m \ell^2\left(\omega^2+\frac{g}{\ell} \theta^2\right) .</script><p>使用欧拉方法进行转化</p><script type="math/tex; mode=display">E_{i+1}=E_i+\frac{1}{2} m g \ell\left(\omega_i^2+\frac{g}{\ell} \theta_i^2\right)(\Delta t)^2</script><blockquote><p>其实只需要使用 $x<em>{i+1}=x_i+v</em>{i+1}dt$ 代替 $x<em>{i+1}=x_i+v</em>{i}dt$ 就可以一定程度上解决</p></blockquote><h2 id="使用Euler-Cromer方法进行模拟"><a href="#使用Euler-Cromer方法进行模拟" class="headerlink" title="使用Euler-Cromer方法进行模拟"></a>使用Euler-Cromer方法进行模拟</h2><p>对于简谐运动，运动方程的一般形式为</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><blockquote><p>采用 Euler-Cromer 方法求解 x 关于时间的函数，其中 $\alpha=1$ （为了方便，取 k=1 ）。这是简谐运动的一个关键特征。然后将程序扩展到处理 $\alpha=3$ 的情况。这是一个非简谐振子的例子。计算了几个不同振幅（在范围 0.2 到 1 内）下的振动周期，并证明现在运动的周期取决于振幅。</p></blockquote><h3 id="alpha-1-的情况"><a href="#alpha-1-的情况" class="headerlink" title="$\alpha=1$ 的情况"></a>$\alpha=1$ 的情况</h3><p>谐振子的 json 文档为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oscillator&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;oscillator1&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator4&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;oscillator5&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;distance0&quot;</span><span class="punctuation">:</span><span class="number">0.8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;velocity0&quot;</span><span class="punctuation">:</span><span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们要研究这个函数的图像</p><script type="math/tex; mode=display">\frac{d^2x}{dt^2}=-kx^\alpha</script><p>先只取 $\alpha=1$ ,并且 $k=1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of pendulum with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t = oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>当$\alpha=1$时得到图像1</p><p><img src="/img/excise3-4-1.png" alt="&quot;谐振子图像1&quot;"></p><p>当$\alpha=3$时得到图像2</p><p><img src="/img/excise3-4-2.png" alt="&quot;谐振子图像2&quot;"></p><h3 id="考虑振幅与周期的关系"><a href="#考虑振幅与周期的关系" class="headerlink" title="考虑振幅与周期的关系"></a>考虑振幅与周期的关系</h3><p>接下来我们给simple_oscillator类增加一个calculate_period()函数，用来计算谐振子的周期</p><blockquote><p>calculate_period() 是通过判断$x$是否在初始位置附近来确定周期大小</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Simulation of oscillators with Euler Cromer</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># declare contants</span></span><br><span class="line">k=<span class="number">1</span></span><br><span class="line">dt = <span class="number">0.1</span></span><br><span class="line">max_steps = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">simple_oscillator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, distance0=<span class="number">0</span>, velocity0=<span class="number">0</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.distance = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.velocity = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.t = np.zeros(max_steps + <span class="number">1</span>, dtype = np.float64)</span><br><span class="line">        <span class="variable language_">self</span>.distance[<span class="number">0</span>] = distance0</span><br><span class="line">        <span class="variable language_">self</span>.velocity[<span class="number">0</span>] = velocity0</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">move_one_step</span>(<span class="params">self, distance, velocity, t</span>):</span><br><span class="line">        _velocity = velocity - k*distance**<span class="number">3</span>*dt</span><br><span class="line">        _distance = distance + _velocity*dt</span><br><span class="line">        _t = t + dt</span><br><span class="line">        <span class="keyword">return</span> _distance, _velocity, _t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_results</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.distance, <span class="variable language_">self</span>.velocity, <span class="variable language_">self</span>.t,<span class="variable language_">self</span>.period</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_period</span>(<span class="params">self</span>):</span><br><span class="line">        period_list=[]</span><br><span class="line">        period_sum=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(max_steps):</span><br><span class="line">            <span class="variable language_">self</span>.distance[i + <span class="number">1</span>], <span class="variable language_">self</span>.velocity[i + <span class="number">1</span>], <span class="variable language_">self</span>.t[i + <span class="number">1</span>] = <span class="variable language_">self</span>.move_one_step(<span class="variable language_">self</span>.distance[i], <span class="variable language_">self</span>.velocity[i], <span class="variable language_">self</span>.t[i])</span><br><span class="line">            <span class="keyword">if</span> i&gt;=<span class="number">5</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &lt;= <span class="number">0.05</span> <span class="keyword">and</span> <span class="built_in">abs</span>(<span class="variable language_">self</span>.distance[i-<span class="number">1</span>]-<span class="variable language_">self</span>.distance[<span class="number">0</span>]) &gt;= <span class="number">0.05</span>:</span><br><span class="line">                period_list.append(i)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(period_list)):</span><br><span class="line">            <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                period_sum+=period_list[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                period_sum+=period_list[i]-period_list[i-<span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">self</span>.period=period_sum*dt/<span class="built_in">len</span>(period_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_oscillator_with_Euler_Cromer</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./computational-physics-project/lecture-3/oscillator.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f)</span><br><span class="line">    oscillator1 = simple_oscillator(data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;distance0&quot;</span>],</span><br><span class="line">                                data[<span class="string">&quot;oscillator&quot;</span>][<span class="string">&quot;oscillator1&quot;</span>][<span class="string">&quot;velocity0&quot;</span>])</span><br><span class="line">    oscillator1.calculate_period()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, layout=<span class="string">&quot;constrained&quot;</span>)</span><br><span class="line">    distance, velocity, t , period= oscillator1.get_results()</span><br><span class="line">    ax[<span class="number">0</span>].plot(t, distance, label=<span class="string">r&quot;$x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$x$(m)&quot;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].legend()</span><br><span class="line">    ax[<span class="number">0</span>].set_title(<span class="string">r&quot;Oscillation of $x$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(t, velocity, label=<span class="string">r&quot;$v$&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].<span class="built_in">set</span>(xlabel=<span class="string">&quot;t(s)&quot;</span>, ylabel=<span class="string">r&quot;$v$(m/s)&quot;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].legend()</span><br><span class="line">    ax[<span class="number">1</span>].set_title(<span class="string">r&quot;Oscillation of $v$&quot;</span>)</span><br><span class="line">    plt.savefig(<span class="string">&quot;osillator.png&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(period)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">show_oscillator_with_Euler_Cromer()</span><br></pre></td></tr></table></figure><p>模拟得到</p><div class="table-container"><table><thead><tr><th style="text-align:center">振幅</th><th style="text-align:center">周期</th></tr></thead><tbody><tr><td style="text-align:center">0.2</td><td style="text-align:center">35.20</td></tr><tr><td style="text-align:center">0.4</td><td style="text-align:center">18.28</td></tr><tr><td style="text-align:center">0.6</td><td style="text-align:center">12.26</td></tr><tr><td style="text-align:center">0.8</td><td style="text-align:center">9.22</td></tr><tr><td style="text-align:center">1.0</td><td style="text-align:center">7.38</td></tr></tbody></table></div><p>随着振幅增大，周期变小。</p><blockquote><p>一个直观的理解，当$\alpha&gt;1 $ 时，$-kx^\alpha$ 对 $x$ 更敏感，当$x$增大，波动会更强烈</p></blockquote><h3 id="理论解释"><a href="#理论解释" class="headerlink" title="理论解释"></a>理论解释</h3><p>对于前一个练习中 (3.9) 的非简谐振子，可以通过某些特殊函数来解析地获得振动周期关于 $\alpha$ 的一般值的关系。请进行这样的计算，并描述周期与振幅之间的关系如何取决于 $\alpha$ 的值。你能对这个结果给出一个物理解释吗？提示：如果将 (3.9) 的两边都乘以 $\frac{d x}{d t}$，然后对 $t$ 进行积分。这将导致速度和 x 之间的关系。</p><script type="math/tex; mode=display">\frac{dv}{dt}=-kx^\alpha</script><p>变换为</p><script type="math/tex; mode=display">\frac{dv}{dx}\frac{dx}{dt}=-kx^\alpha</script><script type="math/tex; mode=display">vdv=-kx^\alpha dx</script><p>积分得</p><script type="math/tex; mode=display">\frac{1}{2}v^2=-\frac{k}{\alpha+1}x^{\alpha+1}\bigg |_{t=0}^{t=t}</script><p>再利用$v=\frac{dx}{dt}$</p><script type="math/tex; mode=display">\frac{dx}{dt}=\sqrt{\frac{2k}{\alpha+1}(x^{\alpha+1}-x_0^{\alpha+1})}</script><script type="math/tex; mode=display">\frac{dx}{\sqrt{x^{\alpha+1}-x_0^{\alpha+1})}}=\sqrt{\frac{2k}{\alpha+1}}dt</script><p>这个积分无法解析表示，但是可以写成下式</p><script type="math/tex; mode=display">x=F(\sqrt{\frac{2k}{\alpha+1}}t)</script><p>其中$F(x)$是一个周期函数</p><p>那么$\sqrt{\frac{2k}{\alpha+1}}$随$\alpha$增大而减小，故周期增大</p>]]></content>
      
      
      <categories>
          
          <category> 计算物理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算物理 </tag>
            
            <tag> 简谐振动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热力学与统计力学之均匀介质热力学</title>
      <link href="/2024/10/23/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9D%87%E5%8C%80%E4%BB%8B%E8%B4%A8%E7%83%AD%E5%8A%9B%E5%AD%A6/"/>
      <url>/2024/10/23/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%9D%87%E5%8C%80%E4%BB%8B%E8%B4%A8%E7%83%AD%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="热力学与统计力学"><a href="#热力学与统计力学" class="headerlink" title="热力学与统计力学"></a>热力学与统计力学</h1><h2 id="第二章-均匀介质热力学"><a href="#第二章-均匀介质热力学" class="headerlink" title="第二章 均匀介质热力学"></a>第二章 均匀介质热力学</h2><h3 id="2-2-麦克斯韦关系式"><a href="#2-2-麦克斯韦关系式" class="headerlink" title="2.2 麦克斯韦关系式"></a>2.2 麦克斯韦关系式</h3><p>对 $pVT$ 系统，其热力学能、焓、自由能和吉布斯函数的微分式分别为</p><script type="math/tex; mode=display">\mathrm{d}U=\quad T\mathrm{d}\mathrm{S}-p\mathrm{d}V \tag{2.2.1}</script><script type="math/tex; mode=display">\mathrm{d}H=\quad T\mathrm{d}S+V\mathrm{d}p \tag{2.2.2}</script><script type="math/tex; mode=display">\mathrm{d}F=-S\mathrm{d}T-p\mathrm{d}V \tag{2.2.3}</script><script type="math/tex; mode=display">\mathrm{d}G=-S\mathrm{d}T+V\mathrm{d}p \tag{2.2.4}</script><p>根据全微分条件有</p><script type="math/tex; mode=display">\left(\frac{\partial p}{\partial S}\right)_{V}=-\left(\frac{\partial T}{\partial V}\right)_{S} \tag{2.2.5}</script><script type="math/tex; mode=display">\left(\frac{\partial V}{\partial S}\right)_{p}=\quad\left(\frac{\partial T}{\partial p}\right)_{S} \tag{2.2.6}</script><script type="math/tex; mode=display">\left(\frac{\partial S}{\partial V}\right)_{T}=\quad\left(\frac{\partial p}{\partial T}\right)_{V} \tag{2.2.7}</script><script type="math/tex; mode=display">\left(\frac{\partial S}{\partial p}\right)_{T}=-\left(\frac{\partial V}{\partial T}\right)_{p} \tag{2.2.8}</script><blockquote><p>右下角的$p,V,T,S$ 表示该偏导是在右下角量不变的情况下进行的，这非常重要，当我们遇到这些量出现在偏导中时，它们往往代表着这个偏导为零，这可能可以为我们化简大量公式</p></blockquote><p>上述 $4$ 个关系式叫做<strong>麦克斯韦关系式</strong>，它们把实验上不容易直接测量的量(关系式左边)用易于测量的量(关系式右边)表示出来，它们有这些应用</p><blockquote><p>具体的推导是利用了</p><script type="math/tex; mode=display">df=\frac{\partial f}{\partial x}dx+\frac{\partial f}{\partial y}dy</script><p>有混合偏导成立</p><script type="math/tex; mode=display">\frac{\partial^2 f}{\partial x\partial y}=\frac{\partial^2 f}{\partial y\partial x}</script><p>考虑一个有趣的公式，它可以可以利用雅可比行列式性质证明</p><script type="math/tex; mode=display">\frac{\partial(T, S)}{\partial(x, y)}=\frac{\partial(p, V)}{\partial(x, y)}</script><p>它可以可以利用雅可比行列式性质证明</p><p>由</p><script type="math/tex; mode=display">\scriptsize T\mathrm{d}S=T\left(\frac{\partial S}{\partial x}\right)_y\mathrm{d}x+T\left(\frac{\partial S}{\partial y}\right)_x\mathrm{d}y</script><script type="math/tex; mode=display">\scriptsize \begin{aligned}\text{TdS}& =\mathrm{d}U+p \mathrm{d}V=\Big(\frac{\partial U}{\partial x}\Big)_{y}\mathrm{d}x+\Big(\frac{\partial U}{\partial y}\Big)_{x}\mathrm{d}y+p\Big[\Big(\frac{\partial V}{\partial x}\Big)_{y}\mathrm{d}x+\Big(\frac{\partial V}{\partial y}\Big)_{x}\mathrm{d}y\Big] \\&=\biggl[\left(\frac{\partial U}{\partial x}\right)_{y}+p\left(\frac{\partial V}{\partial x}\right)_{y}\biggr] \mathrm{d}x+\biggl[\left(\frac{\partial U}{\partial y}\right)_{x}+p\left(\frac{\partial V}{\partial y}\right)_{x}\biggr] \mathrm{d}y\end{aligned}</script><p>比较得</p><script type="math/tex; mode=display">\scriptsize T\left(\frac{\partial S}{\partial x}\right)_{y}=\left(\frac{\partial U}{\partial x}\right)_{y}+p\left(\frac{\partial V}{\partial x}\right)_{y}\\T\left(\frac{\partial S}{\partial y}\right)_{x}=\left(\frac{\partial U}{\partial y}\right)_{x}+p\left(\frac{\partial V}{\partial y}\right)_{x}</script><script type="math/tex; mode=display">\scriptsize T \frac{\partial^{2}S}{\partial x\partial y}+\left(\frac{\partial T}{\partial y}\right)_{x} \left(\frac{\partial S}{\partial x}\right)_{y}=\frac{\partial^{2}U}{\partial x\partial y}+p \frac{\partial^{2}V}{\partial x\partial y}+\left(\frac{\partial p}{\partial y}\right)_{x} \left(\frac{\partial V}{\partial x}\right)_{y}\\T \frac{\partial^{2}S}{\partial x\partial y}+\left(\frac{\partial T}{\partial x}\right)_{y} \left(\frac{\partial S}{\partial y}\right)_{x}=\frac{\partial^{2}U}{\partial x\partial y}+p \frac{\partial^{2}V}{\partial x\partial y}+\left(\frac{\partial p}{\partial x}\right)_{y} \left(\frac{\partial V}{\partial y}\right)_{x}</script><p>两式相减得</p><script type="math/tex; mode=display">\scriptsize \frac{\partial(T, S)}{\partial(x, y)}=\frac{\partial(p, V)}{\partial(x, y)}</script><p>其中$x,y$可分别取$S,T,p,V$ 得到麦克斯韦关系式</p></blockquote><font face="楷体" size="5"> 1.熵的计算公式</font><p>若以 $T$ 和 $V$ 为自变量，则</p><script type="math/tex; mode=display">\mathrm{d}S=\left(\frac{\partial S}{\partial T}\right)_{V}\mathrm{d}T+\left(\frac{\partial S}{\partial V}\right)_{T}\mathrm{d}V\tag{2.2.9}</script><p>从而</p><script type="math/tex; mode=display">T\mathrm{d}S=T\Big(\frac{\partial S}{\partial T}\Big)_{V}\mathrm{d}T+T\Big(\frac{\partial S}{\partial V}\Big)_{T}\mathrm{d}V\tag{2.2.10}</script><p>利用式 $(2.2.7)$ 及</p><script type="math/tex; mode=display">C_{V}=\lim_{\stackrel{\Delta T\to 0}{\Delta V=0}}\frac{\Delta Q}{\Delta T}=T\Big(\frac{\partial S}{\partial T}\Big)_{V}\tag{2.2.11}</script><p>式 $(2.2.10)$ 可写成</p><script type="math/tex; mode=display">\boxed{T\mathrm{d}S=C_{V}\mathrm{d}T+T\Big(\frac{\partial p}{\partial T}\Big)_{V}\mathrm{d}V\tag{2.2.12}}</script><p>若以 $T$ 和 $p$ 为自变量，类似地则有</p><script type="math/tex; mode=display">T\mathrm{d}S=T\Big(\frac{\partial S}{\partial T}\Big)_p\mathrm{d}T+T\Big(\frac{\partial S}{\partial p}\Big)_T\mathrm{d}p\tag{2.2.13}</script><p>利用式 $(2.2.8)$ 及定压热容的定义，式 $(2.2.13)$ 可改写成</p><script type="math/tex; mode=display">\boxed{T\mathrm{d}S=C_{p}\mathrm{d}T-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\mathrm{d}p\tag{2.2.14}}</script><p>式 $(2.2.12)$ 和式 $(2.2.14)$ 都叫做$TdS$ <strong>方程</strong>，它们是熵的计算公式，只要知道系统的热容量和物态方程，原则上便可以确定其熵。</p><blockquote><p>可以推导式子$\left(\frac{\partial C<em>{V}}{\partial V}\right)</em>{T}=T\left(\frac{\partial^{2}p}{\partial T^{2}}\right)_{V}$来认识$C_V$,$C_p$与$S$的关系</p><script type="math/tex; mode=display">\begin{aligned}\left(\frac{\partial C_{V}}{\partial V}\right)_{\tau}& =\left[\frac{\partial}{\partial V}T\left(\frac{\partial S}{\partial T}\right)_{V}\right]_{T}=T\frac{\partial^{2}S}{\partial V\partial T}=T\left[\frac{\partial}{\partial T}\left(\frac{\partial S}{\partial V}\right)_{T}\right]_{V} \\&=T\left[\frac{\partial}{\partial T}\left(\frac{\partial p}{\partial T}\right)_{V}\right]_{V}=T\left(\frac{\partial^{2}p}{\partial T^{2}}\right)_{V}\end{aligned}</script></blockquote><font face="楷体" size="5"> 2.热力学能的计算公式 </font><p>通常以 $T$ 和 $V$ 为自变量计算热力学能比较方便。将式 $(2.2.12)$ 代入式 $(2.2.1)$ 即得到热力学能的计算公式</p><script type="math/tex; mode=display">\mathrm{d}U=C_V\mathrm{d}T+\biggl[T\biggl(\frac{\partial p}{\partial T}\biggr)_V-p\biggr]\mathrm{d}V\tag{2.2.15}</script><p>对照</p><script type="math/tex; mode=display">\mathrm{d}U=\left(\frac{\partial U}{\partial T}\right)_{V}\mathrm{d}T+\left(\frac{\partial U}{\partial V}\right)_{T}\mathrm{d}V\tag{2.2.16}</script><p>有</p><script type="math/tex; mode=display">\boxed{\left(\frac{\partial U}{\partial V}\right)_T=\left[T\left(\frac{\partial p}{\partial T}\right)_V-p\right]\mathrm{d}V\tag{2.2.17}}</script><p>利用式 $(2.2.17)$ 即可计算内压强。</p><font face="楷体" size="5"> 3.$C_p-C_V$的值 </font><p>相对说来，定容热容量较难测量，为此，可以先确定 $C_p-C_V$ 。从式 $(2.2.12)$ 和式 $(2.2.14)$ 可知</p><script type="math/tex; mode=display">C_{V}\mathrm{d}T+T\Big(\frac{\partial p}{\partial T}\Big)_{V}\mathrm{d}V=C_{p}\mathrm{d}T-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\mathrm{d}p\tag{2.2.18}</script><p>将 $T$ 视为 $p$ 和 $V$ 的函数，则有</p><script type="math/tex; mode=display">\mathrm{d}T=\left(\frac{\partial T}{\partial p}\right)_{v}\mathrm{d}p+\left(\frac{\partial T}{\partial V}\right)_{p}\mathrm{d}V\tag{2.2.19}</script><p>将式 $(2.2.19)$ 代入式 $(2.2.18)$ 得</p><script type="math/tex; mode=display">\left[(C_{p}-C_{V})\left(\frac{\partial T}{\partial p}\right)_{V}-T\left(\frac{\partial V}{\partial T}\right)_{p}\right]\mathrm{d}p</script><script type="math/tex; mode=display">\quad+\left[(C_{p}-C_{V})\left(\frac{\partial T}{\partial V}\right)_{p}-T\left(\frac{\partial p}{\partial T}\right)_{V}\right]\mathrm{d}V=0\tag{2.2.20}</script><p>因为 $p$ 和 $V$ 是独立变量，所以</p><script type="math/tex; mode=display">\left[ (C_{p}-C_{V})\left(\frac{\partial T}{\partial p}\right)_{V}-T\left(\frac{\partial V}{\partial T}\right)_{p}\right]\mathrm{d}p=0</script><script type="math/tex; mode=display">\left[ (C_{p}-C_{V})\left(\frac{\partial T}{\partial V}\right)_{p}-T\left(\frac{\partial p}{\partial T}\right)_{V}\right]\mathrm{d}V=0 \tag{2.2.21}</script><p>由此可得</p><script type="math/tex; mode=display">\boxed {C_p-C_V=T\Big(\frac{\partial V}{\partial T}\Big)_p\Big(\frac{\partial p}{\partial T}\Big)_V}\tag{2.2.22}</script><blockquote><p>思考：计算范德瓦尔斯方程的定压膨胀系数、定容压强系数、定温压缩系数</p></blockquote><p>可见，只要系统物态方程已知，由式 $(2.2.22)$ 便可计算出 $C_p$ 与 $C_V$ 利用定压膨胀系数和等温压缩系数的定义式</p><script type="math/tex; mode=display">\alpha =\frac{1}{V}\Big(\frac{\partial V}{\partial T}\Big)_{_p} \quad,\quad \kappa=-\frac{1}{V}\Big(\frac{\partial V}{\partial p}\Big)_{_T}\tag{2.2.23}</script><p>以及关系式</p><script type="math/tex; mode=display">\left(\frac{\partial V}{\partial T}\right)_{p}\left(\frac{\partial T}{\partial p}\right)_{V}\left(\frac{\partial p}{\partial V}\right)_{T}=-1\tag{2.2.24}</script><p>式 $(2.2.22)$ 可改写成</p><script type="math/tex; mode=display">\boxed{C_{p}-C_{V}=-T\Big(\frac{\partial V}{\partial T}\Big)_{p}\Big(\frac{\partial p}{\partial V}\Big)_{T}=\frac{TV\alpha^{2}}{\kappa}\tag{2.2.25}}</script><p>从式 $(2.2.12)$ 、式 $(2.2.14)$ 、式 $(2.2.15)$ 和式 $(2.2.22)$ 可知，只要知道系统的定压热容量和物态方程，原则上便可以确定其热力学能和熵以及其他热力学函数。</p><blockquote><p><strong>热力学微分关系总结</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">热力学函数</th><th style="text-align:center">$U$</th><th style="text-align:center">$H=U+PV$</th><th style="text-align:center">$F=U-TS$</th><th style="text-align:center">$G=H-TS$</th></tr></thead><tbody><tr><td style="text-align:center"><strong>热力学基本方程</strong></td><td style="text-align:center">$dU=TdS-pdV$</td><td style="text-align:center">$dH=TdS+Vdp$</td><td style="text-align:center">$dF=-SdT-pdV$</td><td style="text-align:center">$dG=-SdT+Vdp$</td></tr><tr><td style="text-align:center"><strong>热力学偏导数</strong></td><td style="text-align:center"><script type="math/tex">\begin{aligned}T=\left(\frac{\partial U}{\partial S}\right)_{V}\\p=-\left(\frac{\partial U}{\partial V}\right)_{S}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}T=\left(\frac{\partial H}{\partial S}\right)_{p}\\V=\left(\frac{\partial H}{\partial p}\right)_{S}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}S=-\left(\frac{\partial F}{\partial T}\right)_{V}\\p=-\left(\frac{\partial F}{\partial V}\right)_{T}\end{aligned}</script></td><td style="text-align:center"><script type="math/tex">\begin{aligned}&S=-\left(\frac{\partial G}{\partial T}\right)_{p}\\&V=\left(\frac{\partial G}{\partial p}\right)_{T}\end{aligned}</script></td></tr><tr><td style="text-align:center"><strong>麦克斯韦关系</strong></td><td style="text-align:center">$\left(\frac{\partial T}{\partial V}\right)_S=-\left(\frac{\partial p}{\partial S}\right)_V$</td><td style="text-align:center">$\left(\frac{\partial T}{\partial p}\right)_S=\left(\frac{\partial V}{\partial S}\right)_p$</td><td style="text-align:center">$\left(\frac{\partial p}{\partial T}\right)_V=\left(\frac{\partial S}{\partial V}\right)_T$</td><td style="text-align:center">$-\left(\frac{\partial V}{\partial T}\right)_p=\left(\frac{\partial S}{\partial p}\right)_T$</td></tr></tbody></table></div></blockquote>]]></content>
      
      
      <categories>
          
          <category> 热力学与统计力学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物理 </tag>
            
            <tag> 热力学与统计力学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>We Are the World</title>
      <link href="/2024/10/20/we-are-the-world/"/>
      <url>/2024/10/20/we-are-the-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到OldCabbage的博客</p><h1 id="此刻"><a href="#此刻" class="headerlink" title="此刻"></a>此刻</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>我叫Ethan<br>这个博客记录我的思考、对世界的认识。</p><p><img src="https://images.nationalgeographic.org/image/upload/v1652341068/EducationHub/photos/ocean-waves.jpg" alt="图1" title="大海"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>简历</title>
      <link href="/CV/index.html"/>
      <url>/CV/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><iframe src="/CV/Chengxin Liu CV.pdf" width="100%" height="900" style="border:0;"></iframe><br><a href="/CV/Chengxin Liu CV.pdf" download>下载我的简历（PDF）</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>图库</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.postimg.cc/hvXVFbL8/20250903160228-9-78.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">七夕</div>  <p>Me and You 2025.8.29</p>  <a href='/Gallery/qixi'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.postimg.cc/Y9DDYdvY/20251007235549-103-78.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">生日</div>  <p>Ethan Liu 2025.10.03 With Asteria</p>  <a href='/Gallery/2025-liu-birthday'></a>  </figcaption>  </figure>  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>花卉</title>
      <link href="/Flowers/index.html"/>
      <url>/Flowers/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>专业</title>
      <link href="/major/index.html"/>
      <url>/major/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.postimg.cc/yNSXMRDr/Pathria-Beale.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Statistic Mechanics</div>  <p>热力学与统计力学</p>  <a href='/major/Thermo'></a>  </figcaption>  </figure>  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>在读论文</title>
      <link href="/papers/index.html"/>
      <url>/papers/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2025-8"><a href="#2025-8" class="headerlink" title="2025.8"></a>2025.8</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Statistic Mechanics</title>
      <link href="/major/Thermo/index.html"/>
      <url>/major/Thermo/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一些资料"><a href="#一些资料" class="headerlink" title="一些资料"></a>一些资料</h2><p>David Tong 讲义: <a href="https://www.damtp.cam.ac.uk/user/tong/statphys.html"><strong>David Tong: Lectures on Statistical Physics</strong></a></p><p>Mehran Kardar, MIT: <a href="https://ocw.mit.edu/courses/8-333-statistical-mechanics-i-statistical-mechanics-of-particles-fall-2013/"><strong>Statistical Mechanics I: Statistical Mechanics of Particles</strong></a>, MIT open course</p><p><a href="https://www.sciencedirect.com/book/9780123821881/statistical-mechanics"><strong>Statistical Mechanics, 3nd edition (Paul D. Beale, R.K. Pathria)</strong></a> 建议有一定统计物理知识后学习，对基础的书籍有较多补充且知识体系更严谨</p><p><strong>热力学与统计物理学（胡承正）</strong> 我在学习热力学与统计力学的用书，整体较为合理，但在中后章节稍有几处解释不清</p><p><a href="https://www.clcindex.com/book/view/01BE2034F5EE1FE872FAFCA5B86C87C9/"><strong>热力学与统计物理学学习指导</strong></a> 针对胡先生书籍的习题与答案</p><p><a href="https://www.pup.cn/bookDetail?name=%25E7%2583%25AD%25E5%258A%259B%25E5%25AD%25A6%25E4%25B8%258E%25E7%25BB%259F%25E8%25AE%25A1%25E7%2589%25A9%25E7%2590%2586%25E5%25AD%25A6%25EF%25BC%2588%25E7%25AC%25AC%25E4%25B8%2589%25E7%2589%2588%25EF%25BC%2589&amp;id=3eacc0d2a1a74fbf8102f80e92472b91&amp;0.5562953821562105"><strong>热力学与统计物理学（林宗涵）</strong></a> 较新的一本书，对初学者、自学者友好，解释清晰</p><p><a href="https://books.google.com.hk/books?id=o0k_PmXGG7gC&amp;printsec=frontcover&amp;source=gbs_book_other_versions_r&amp;redir_esc=y#v=onepage&amp;q&amp;f=false"><strong>statistical thermodynamic(Erwin Schrödinger)</strong></a></p><p><a href="https://www.hep.com.cn/book/show/81d65839-9245-4d6e-a8ba-e71a0437b290"><strong>统计物理学II：凝聚态理论 (Е.М.栗弗席兹, Л.П.皮塔耶夫斯基)</strong></a></p><p><a href="https://www.hep.com.cn/book/show/f8269435-6576-4df9-aea6-026d0f6e0153"><strong>热学（李椿，章立源，钱尚武）</strong></a> 补充一些热学的知识，对前几章不清晰的可以在这里获得详细解释</p><h2 id="个人学习想法"><a href="#个人学习想法" class="headerlink" title="个人学习想法"></a>个人学习想法</h2><p>统计物理的学习对公式要有很强的敏感性，我初学统计物理的时候往往对何时使用正确的公式而苦恼。关键在于，掌握基础的一些公式，再依据微分关系进行推导，例如Maxwell关系，内能、焓的微分形式，其余的公式皆可由这些基础的公式得到。故对微积分特别是偏微分的形式要足够熟练。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>七夕</title>
      <link href="/Gallery/qixi/index.html"/>
      <url>/Gallery/qixi/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-items">[{"url":"https://i.postimg.cc/gr9XC9kd/20250903160247-16-78.jpg","alt":"Us and Flower"},{"url":"https://i.postimg.cc/br4kqDg7/20250903160227-8-78.jpg","alt":""},{"url":"https://i.postimg.cc/5tpz6kpq/20250903160239-13-78.jpg","alt":""},{"url":"https://i.postimg.cc/bvqbYj0w/20250903160238-12-78.jpg","alt":""},{"url":"https://i.postimg.cc/8556WB08/20250903160240-14-78.jpg","alt":""},{"url":"https://i.postimg.cc/3x5m6Gdp/20250903160236-11-78.jpg","alt":""},{"url":"https://i.postimg.cc/nrHgjJgc/20250903162102-24-78.jpg","alt":""},{"url":"https://i.postimg.cc/wMCN4qz9/20250903183304-25-78.jpg","alt":""},{"url":"https://i.postimg.cc/CxVDjxJN/20250903183311-27-78.jpg","alt":""},{"url":"https://i.postimg.cc/ZY265cdX/20250903183312-28-78.jpg","alt":""},{"url":"https://i.postimg.cc/63TG9259/20250903183314-29-78.jpg","alt":""},{"url":"https://i.postimg.cc/cJxnbkpt/20250903183316-30-78.jpg","alt":""},{"url":"https://i.postimg.cc/HL6yD4mZ/20250903183319-31-78.jpg","alt":""}]</div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>生日</title>
      <link href="/Gallery/2025-liu-birthday/index.html"/>
      <url>/Gallery/2025-liu-birthday/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-items">[{"url":"https://i.postimg.cc/bJwFZ7wx/20251007235539-98-78.jpg","alt":""},{"url":"https://i.postimg.cc/G2mS4Wmk/20251007235541-99-78.jpg","alt":""},{"url":"https://i.postimg.cc/76ZQ5FZH/20251007235543-100-78.jpg","alt":""},{"url":"https://i.postimg.cc/Y9DDYdvP/20251007235600-109-78.jpg","alt":""},{"url":"https://i.postimg.cc/3Rxbksxy/20251007235545-101-78.jpg","alt":""},{"url":"https://i.postimg.cc/tTvvWBsd/20251007235551-104-78.jpg","alt":""},{"url":"https://i.postimg.cc/pTcczsmZ/20251007235552-105-78.jpg","alt":""},{"url":"https://i.postimg.cc/1t77wv87/20251007235557-108-78.jpg","alt":""},{"url":"https://i.postimg.cc/NMCCmdKD/20251007235553-106-78.jpg","alt":""}]</div>    </div>]]></content>
      
    </entry>
    
    
  
</search>
