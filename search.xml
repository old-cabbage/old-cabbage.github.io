<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hoomd-blue Two Dimension Particles Simulation</title>
      <link href="/2024/10/20/Hoomd-blue/"/>
      <url>/2024/10/20/Hoomd-blue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://glotzerlab.engin.umich.edu/hoomd-blue/">Hoomd-blue</a>一款分子动力学模拟软件，由University of Michigan开发，开源于<a href="https://github.com/glotzerlab/hoomd-blue">github</a>，学习其详细内容可参考它的<a href="https://hoomd-blue.readthedocs.io/en/v4.8.2/">官方文档</a>和<a href="https://github.com/glotzerlab/hoomd-examples">github实例</a>。</p><h1 id="开端"><a href="#开端" class="headerlink" title="开端"></a>开端</h1><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>Ethan在此之前计算机只有python基础课水平，没有独立参加过项目，所以学习了较长时间（断断续续有一个月），才将其基础搞懂，开始复现一篇论文中的结果，这篇论文（<a href="https://arxiv.org/abs/2310.10551">A geometry-originated universal relation for arbitrary convex hard particles</a>）是导师要求学习的，但是没有想到看似简单的文章要学习和复现难度也如此大。frustrating</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>论文主体上围绕一个公式展开</p><script type="math/tex; mode=display">\lim\limits_{\overset{N\to\infty}{N/V=\rho}}\frac{1}{N}\ln(\prod\limits_{i=1}^{N}\frac{P_{N+1}}{P_{i}})=-\frac{\tilde{s}(0+)}{2d}</script><h1 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h1><p>经过对官方文档孜孜不倦的学习，开始尝试写代码，（Hoomd文档没有类似的例子，这代码是真难写啊），自认为代码非常粗糙，是Ethan在半知半解的调用函数和疯狂骚扰ChatGpt之后弄出来的结果：&gt;</p><h2 id="插入成功几率函数"><a href="#插入成功几率函数" class="headerlink" title="插入成功几率函数"></a>插入成功几率函数</h2><p>为了得到插入成功的概率就需要一个能连续向体系中插入单个粒子的函数，不懈努力后，成功生造了一个在体系中插入粒子的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_triangle</span>(<span class="params">simulation, mc,times=<span class="number">100</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在现有的 HOOMD 模拟中随机插入指定数量的三角形粒子，并检测与已有粒子是否重叠。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    simulation: hoomd.Simulation 对象，表示现有的模拟。</span></span><br><span class="line"><span class="string">    mc: hoomd的hpmc，蒙特卡洛积分器</span></span><br><span class="line"><span class="string">    times：重复插入的次数，次数越大准确度越高</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义三角形的顶点，中心在 (0, 0)</span></span><br><span class="line">    <span class="comment">#a = 1.0  # 边长</span></span><br><span class="line">    <span class="comment">#h = np.sqrt(3) / 2 * a  # 等边三角形的高</span></span><br><span class="line">    <span class="comment">#vertices = [(-a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(a/2, -h/3),</span></span><br><span class="line">                <span class="comment">#(0, 2*h/3)]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 HPMC 积分器</span></span><br><span class="line">    <span class="comment">#mc = hoomd.hpmc.integrate.ConvexPolygon()</span></span><br><span class="line">    <span class="comment">#mc.shape[&#x27;A&#x27;] = &#123;&#x27;vertices&#x27;: vertices&#125;</span></span><br><span class="line"></span><br><span class="line">    new_mc = hoomd.hpmc.integrate.ConvexPolygon()</span><br><span class="line">    new_mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将积分器添加到模拟中</span></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取模拟盒尺寸</span></span><br><span class="line">    box = simulation.state.box</span><br><span class="line">    Lx = box.Lx</span><br><span class="line">    Ly = box.Ly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取粒子类型的索引</span></span><br><span class="line">    type_id = simulation.state.particle_types.index(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始插入粒子</span></span><br><span class="line">    inserted_recorder=<span class="number">0</span></span><br><span class="line">    attempts = <span class="number">0</span></span><br><span class="line">    old_snap = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> attempts &lt; times:</span><br><span class="line">        attempts += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 随机生成位置</span></span><br><span class="line">        x = np.random.uniform(-Lx/<span class="number">2</span>, Lx/<span class="number">2</span>)</span><br><span class="line">        y = np.random.uniform(-Ly/<span class="number">2</span>, Ly/<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#print(x,y)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 随机生成取向（四元数表示）</span></span><br><span class="line">        <span class="comment">#theta = np.random.uniform(0, 2*np.pi)</span></span><br><span class="line">        <span class="comment">#orientation = [np.cos(theta/2), 0, 0, np.sin(theta/2)]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 插入粒子</span></span><br><span class="line">        <span class="keyword">if</span> old_snap.communicator.rank == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 记录旧的粒子数量</span></span><br><span class="line">            N_old = old_snap.particles.N</span><br><span class="line">            <span class="comment"># 新的粒子数量</span></span><br><span class="line">            N_new = N_old + <span class="number">1</span></span><br><span class="line">            theta = np.random.uniform(<span class="number">0</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 创建一个新的快照，具有更多的粒子</span></span><br><span class="line">            new_snap = hoomd.Snapshot()</span><br><span class="line">            new_snap.particles.N = N_new</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制盒子尺寸</span></span><br><span class="line">            new_snap.configuration.box = old_snap.configuration.box</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化粒子类型</span></span><br><span class="line">            new_snap.particles.types = old_snap.particles.types</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 初始化属性数组</span></span><br><span class="line">            new_snap.particles.position[:] = np.zeros((N_new, <span class="number">3</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.orientation[:] = np.zeros((N_new, <span class="number">4</span>), dtype=<span class="built_in">float</span>)</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 复制旧的粒子数据</span></span><br><span class="line">            new_snap.particles.position[:N_old] = old_snap.particles.position[:]</span><br><span class="line">            new_snap.particles.orientation[:N_old] = old_snap.particles.orientation[:]</span><br><span class="line">            new_snap.particles.typeid[:N_old] = old_snap.particles.typeid[:]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 设置新粒子的属性</span></span><br><span class="line">            new_snap.particles.position[N_old] = [x, y, <span class="number">0</span>]</span><br><span class="line">            new_snap.particles.orientation[N_old] = [np.cos(theta/<span class="number">2</span>), <span class="number">0</span>, <span class="number">0</span>, np.sin(theta/<span class="number">2</span>)]</span><br><span class="line">            new_snap.particles.typeid[N_old] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果有其他属性（如 charge、diameter 等），也需要进行同样的处理</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_snap = <span class="literal">None</span>  <span class="comment"># 非主进程设置为 None</span></span><br><span class="line"></span><br><span class="line">        cpu = hoomd.device.CPU()</span><br><span class="line">        new_simulation = hoomd.Simulation(device=cpu,seed=<span class="number">1</span>)</span><br><span class="line">        new_simulation.create_state_from_snapshot(new_snap)</span><br><span class="line">        new_simulation.operations.integrator = new_mc</span><br><span class="line">        <span class="comment">#check_snapshot=simulation.state.get_snapshot()</span></span><br><span class="line">        <span class="comment">#render(check_snapshot)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.typeid)</span></span><br><span class="line">        <span class="comment">#print(new_snap.particles.position)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查重叠</span></span><br><span class="line">        new_simulation.run(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> new_mc.overlaps &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#print(f&quot;检测到重叠，移除粒子 &#123;inserted&#125;&quot;)</span></span><br><span class="line">            <span class="comment">#remove_particle(simulation, simulation.state.N_particles - 1)</span></span><br><span class="line">            <span class="comment">#print(new_mc.overlaps)</span></span><br><span class="line">            <span class="comment">#print(new_mc.shape)</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment">#print(mc.overlaps)</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inserted_recorder += <span class="number">1</span></span><br><span class="line">        simulation.state.set_snapshot(old_snap)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inserted_recorder</span><br></pre></td></tr></table></figure><p>需要了解的是，在hoomd中一般有两种储存粒子状态的方式，一种是GSD文件，方便更改，可以从外部轻松访问;另一种是snapshot，多用于在代码环境中储存系统信息，方便调用和删除释放内存。</p><h2 id="SDF函数"><a href="#SDF函数" class="headerlink" title="SDF函数"></a>SDF函数</h2><p>SDF是scale distribution function的简称，中文尺度分布函数，毫无头绪。它是怎么一回事呢，假如体系粒子间的间隔同等乘以一个系数$1-x$（粒子之间的距离是中心与中心的距离）,那么有一定数量的粒子相碰，就可以计正好相碰（只有正好在$1-x$相碰的粒子才算数）的粒子数为$S(x)$，好在这个函数是hoomd官方有的函数，不用现成写，只需要调用就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sdf_compute = hoomd.hpmc.compute.SDF(xmax=xmax, dx=dx)</span><br><span class="line">sdf_xcompression = sdf_compute.x_compression</span><br><span class="line">sdf_compression = sdf_compute.sdf_compression</span><br></pre></td></tr></table></figure><p>此处SDF有两个重要的量可以通过类访问，x_compression和sdf_compression，它们分别是收缩时每一步的x和该x对应的sdf（x），两者都是numpy的array，所以我们后续很方便的就可以进行绘图</p><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>这一部分较简单且在hoomd的文档中花大篇幅和多个例子进行说明了，这里就不赘述原理，只针对本论文要求给出初始化函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_particle</span>(<span class="params">N_particles</span>):</span><br><span class="line">    <span class="comment">#生成一个有N_particles的有序粒子群</span></span><br><span class="line">    spacing = <span class="number">2</span></span><br><span class="line">    K = math.ceil(N_particles ** (<span class="number">1</span> / <span class="number">2</span>))</span><br><span class="line">    L = K * spacing</span><br><span class="line">    x = np.linspace(-L / <span class="number">2</span>, L / <span class="number">2</span>, K, endpoint=<span class="literal">False</span>)</span><br><span class="line">    position_2d = <span class="built_in">list</span>(itertools.product(x, repeat=<span class="number">2</span>))  <span class="comment"># 生成二维网格上的粒子位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取前 N_particles 个位置</span></span><br><span class="line">    positions_2d = np.array(position_2d[<span class="number">0</span>:N_particles])  <span class="comment"># 形状为 (N_particles, 2)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加第三个坐标（z 坐标），设为零</span></span><br><span class="line">    z_coordinates = np.zeros((N_particles, <span class="number">1</span>))  <span class="comment"># 形状为 (N_particles, 1)</span></span><br><span class="line">    positions_3d = np.hstack((positions_2d, z_coordinates))  <span class="comment"># 合并为 (N_particles, 3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建 GSD 帧并设置粒子属性</span></span><br><span class="line">    frame = gsd.hoomd.Frame()</span><br><span class="line">    frame.particles.N = N_particles</span><br><span class="line">    frame.particles.position = positions_3d  <span class="comment"># 现在是 (N_particles, 3) 的数组</span></span><br><span class="line">    frame.particles.typeid = [<span class="number">0</span>] * N_particles</span><br><span class="line">    frame.configuration.box = [L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 注意这里的盒子尺寸</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一个快照</span></span><br><span class="line">    snapshot=hoomd.Snapshot()</span><br><span class="line">    snapshot.particles.N = N_particles</span><br><span class="line">    snapshot.particles.position[:] = positions_3d</span><br><span class="line">    snapshot.particles.typeid[:] = [<span class="number">0</span>] * N_particles</span><br><span class="line">    snapshot.particles.types=[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">    snapshot.configuration.box=[L, L, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> snapshot</span><br></pre></td></tr></table></figure><p>生成一个具有N_particles个粒子的体系，密度恒定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">randomizing_particles</span>(<span class="params">snapshot,times=<span class="number">10e3</span></span>):</span><br><span class="line">    cpu = hoomd.device.CPU()</span><br><span class="line">    simulation = hoomd.Simulation(device=cpu, seed=<span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    mc = hoomd.hpmc.integrate.ConvexPolygon(default_d=<span class="number">0.3</span>,default_a=<span class="number">0.4</span>)</span><br><span class="line">    mc.shape[<span class="string">&quot;A&quot;</span>] = <span class="built_in">dict</span>(</span><br><span class="line">        vertices = [</span><br><span class="line">        (-<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0.5</span>, -<span class="number">0.5</span>),</span><br><span class="line">        (<span class="number">0</span>, <span class="number">0.5</span>),</span><br><span class="line">    ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    simulation.operations.integrator = mc</span><br><span class="line">    simulation.create_state_from_snapshot(snapshot)</span><br><span class="line">    initial_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    simulation.run(times)</span><br><span class="line">    final_snapshot = simulation.state.get_snapshot()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> final_snapshot,mc,simulation</span><br></pre></td></tr></table></figure><p>随机化这个粒子体系，times是MC随机化的步数</p><p>顺便一提，hoomd的官方文档的图像生成函数是基于 <a href="https://fresnel.readthedocs.io/en/v0.13.6/">fresnel</a>的三维图像生成函数。功能很强，但是我要做二维的体系，用不上：&lt; </p><p>我就自己基于<a href="https://matplotlib.org/">matplotlib</a>写了一个二维图像生成函数（目前只支持展现粒子的位置，都是圆形的粒子）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">render</span>(<span class="params">snapshot, dims=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从gsd文件生成一个二维的粒子群图像,目前仅支持圆粒子图.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Extract particle positions and convert to a NumPy array</span></span><br><span class="line">    positions = np.asarray(snapshot.particles.position)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check dimensions (only 2D is supported in this function)</span></span><br><span class="line">    <span class="keyword">if</span> dims != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Only 2D rendering is supported in this function.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot particles</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.scatter(positions[:, <span class="number">0</span>], positions[:, <span class="number">1</span>], s=<span class="number">10</span>, alpha=<span class="number">0.6</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Particle positions from GSD snapshot&#x27;</span>)</span><br><span class="line">    plt.gca().set_aspect(<span class="string">&#x27;equal&#x27;</span>, adjustable=<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h1 id="模拟与调教"><a href="#模拟与调教" class="headerlink" title="模拟与调教"></a>模拟与调教</h1><p>进行中！！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>参加邓紫棋演唱会</title>
      <link href="/2024/10/20/%E9%82%93%E7%B4%AB%E6%A3%8B%E6%BC%94%E5%94%B1%E4%BC%9A/"/>
      <url>/2024/10/20/%E9%82%93%E7%B4%AB%E6%A3%8B%E6%BC%94%E5%94%B1%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>We Are the World</title>
      <link href="/2024/10/20/we-are-the-world/"/>
      <url>/2024/10/20/we-are-the-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎来到OldCabbage的博客</p><h1 id="此刻，世界由我们塑造"><a href="#此刻，世界由我们塑造" class="headerlink" title="此刻，世界由我们塑造"></a>此刻，世界由我们塑造</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;We Are the World!&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>movies</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
    </entry>
    
    
  
</search>
